<!DOCTYPE html>
<html>
<head>
  <title><%= title %> - Internal Audit Portal</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: #f8fafc;
      color: #1e293b;
    }
    
    /* Main Content */
    .main-content {
      margin-left: 260px;
      min-height: 100vh;
      padding: 32px;
      max-width: calc(100% - 260px);
    }
    
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }
    
    .page-title {
      font-size: 32px;
      font-weight: 700;
      color: #0f172a;
    }
    
    /* Notification Toast */
    .notification-container {
      position: fixed;
      top: 32px;
      right: 32px;
      z-index: 9999;
      max-width: 420px;
    }
    
    .notification {
      background: white;
      border-radius: 16px;
      padding: 20px 24px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      border: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      gap: 16px;
      margin-bottom: 16px;
      animation: slideIn 0.4s ease;
      transition: all 0.3s ease;
    }
    
    .notification.success {
      border-left: 4px solid #3b82f6;
    }
    
    .notification.error {
      border-left: 4px solid #ef4444;
    }
    
    .notification.hiding {
      animation: slideOut 0.4s ease forwards;
    }
    
    @keyframes slideIn {
      from {
        transform: translateX(450px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
    
    @keyframes slideOut {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(450px);
        opacity: 0;
      }
    }
    
    .notification-icon {
      width: 40px;
      height: 40px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 20px;
    }
    
    .notification.success .notification-icon {
      background: #dbeafe;
      color: #3b82f6;
    }
    
    .notification.error .notification-icon {
      background: #fee2e2;
      color: #ef4444;
    }
    
    .notification-message {
      flex: 1;
      font-size: 15px;
      font-weight: 500;
      color: #1e293b;
      line-height: 1.5;
    }
    
    .notification-close {
      background: #f8fafc;
      border: none;
      cursor: pointer;
      color: #64748b;
      padding: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 8px;
      transition: all 0.2s;
      width: 32px;
      height: 32px;
    }
    
    .notification-close:hover {
      background: #e2e8f0;
      color: #1e293b;
    }
    
    /* Card Styles */
    .card-modern {
      background: white;
      border-radius: 16px;
      padding: 32px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      margin-bottom: 24px;
    }
    
    .card-title {
      font-size: 20px;
      font-weight: 700;
      color: #0f172a;
      margin-bottom: 24px;
      padding-bottom: 16px;
      border-bottom: 2px solid #e2e8f0;
    }
    
    /* Form Styles */
    .form-label {
      font-weight: 600;
      color: #0f172a;
      margin-bottom: 8px;
      font-size: 14px;
    }
    
    .form-control, .form-select {
      border: 1px solid #e2e8f0;
      border-radius: 10px;
      padding: 12px 16px;
      font-size: 14px;
      transition: all 0.3s ease;
      background: #ffffff;
      box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    }
    
    .form-control:hover, .form-select:hover {
      border-color: #cbd5e1;
      box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    }
    
    .form-control:focus, .form-select:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
      outline: none;
      background: #ffffff;
    }
    /* Search and Filter Section */
.search-filter-section {
  background: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  border: 1px solid #e2e8f0;
  margin-bottom: 24px;
  display: flex;
  gap: 16px;
  align-items: center;
  flex-wrap: wrap;
}

.search-box {
  position: relative;
  flex: 1;
  min-width: 300px;
}

.search-icon {
  position: absolute;
  left: 16px;
  top: 50%;
  transform: translateY(-50%);
  color: #64748b;
  font-size: 16px;
}

.search-input {
  width: 100%;
  border: 1px solid #e2e8f0;
  border-radius: 10px;
  padding: 12px 16px 12px 44px;
  font-size: 14px;
  transition: all 0.3s ease;
  background: #ffffff;
  box-shadow: 0 1px 2px rgba(0,0,0,0.05);
}

.search-input:focus {
  border-color: #3b82f6;
  box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
  outline: none;
}

.filter-group {
  display: flex;
  gap: 12px;
  align-items: center;
}

.filter-select {
  border: 1px solid #e2e8f0;
  border-radius: 10px;
  padding: 12px 16px;
  font-size: 14px;
  background: #ffffff;
  box-shadow: 0 1px 2px rgba(0,0,0,0.05);
  transition: all 0.3s ease;
  min-width: 150px;
  cursor: pointer;
}

.filter-select:focus {
  border-color: #3b82f6;
  box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
  outline: none;
}

.clear-filters-btn {
  background: #f1f5f9;
  border: 1px solid #e2e8f0;
  color: #64748b;
  border-radius: 10px;
  padding: 12px 20px;
  font-weight: 600;
  transition: all 0.2s;
  cursor: pointer;
  font-size: 14px;
}

.clear-filters-btn:hover {
  background: #e2e8f0;
  color: #1e293b;
}

/* Dropdown disabled state - look like normal text */
.custom-dropdown select:disabled ~ .dropdown-button {
  background: transparent;
  border: none;
  box-shadow: none;
  padding: 0;
  cursor: default;
}

.custom-dropdown select:disabled ~ .dropdown-button .dropdown-arrow {
  display: none;
}

.custom-dropdown select:disabled ~ .dropdown-button .dropdown-button-text {
  color: #1e293b;
  font-weight: 400;
}

.custom-dropdown select:disabled ~ .dropdown-button:hover {
  background: transparent;
  border: none;
  box-shadow: none;
}
    /* Custom Dropdown Container */
    .custom-dropdown {
      position: relative;
      width: 100%;
    }
    
    .custom-dropdown select {
      display: none;
    }
    
    /* Dropdown Button */
    .dropdown-button {
      border: 1px solid #e2e8f0;
      border-radius: 10px;
      padding: 8px 12px;
      font-size: 13px;
      background: #ffffff;
      box-shadow: 0 1px 2px rgba(0,0,0,0.05);
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.3s ease;
      user-select: none;
      min-height: 36px;
    }
    
    .dropdown-button:hover {
      border-color: #cbd5e1;
      box-shadow: 0 2px 4px rgba(0,0,0,0.08);
      background-color: #f8fafc;
    }
    
    .dropdown-button.active {
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    .dropdown-button-text {
      color: #64748b;
      flex: 1;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .dropdown-button-text.selected {
      color: #1e293b;
      font-weight: 500;
    }
    
    .dropdown-arrow {
      transition: transform 0.3s ease;
      color: #3b82f6;
      font-size: 10px;
      margin-left: 8px;
    }
    
    .dropdown-button.active .dropdown-arrow {
      transform: rotate(180deg);
    }
    
    /* Dropdown Menu */
    .dropdown-menu-custom {
      position: absolute;
      top: calc(100% + 4px);
      left: 0;
      width: 100%;
      background: white;
      border: 1px solid #e2e8f0;
      border-radius: 12px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      z-index: 1000;
      display: none;
      max-height: 280px;
      overflow: hidden;
      animation: dropdownFadeIn 0.2s ease;
    }
    
    @keyframes dropdownFadeIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .dropdown-menu-custom.show {
      display: block;
    }
    
    /* Search Box */
    .dropdown-search {
      padding: 10px;
      border-bottom: 1px solid #e2e8f0;
    }
    
    .dropdown-search input {
      width: 100%;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 6px 10px;
      font-size: 13px;
      outline: none;
      transition: all 0.2s;
    }
    
    .dropdown-search input:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    /* Options List */
    .dropdown-options {
      max-height: 200px;
      overflow-y: auto;
      padding: 4px;
    }
    
    .dropdown-options::-webkit-scrollbar {
      width: 6px;
    }
    
    .dropdown-options::-webkit-scrollbar-track {
      background: #f1f5f9;
      border-radius: 10px;
    }
    
    .dropdown-options::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 10px;
    }
    
    .dropdown-options::-webkit-scrollbar-thumb:hover {
      background: #94a3b8;
    }
    
    /* Option Items */
    .dropdown-option {
      padding: 8px 10px;
      cursor: pointer;
      border-radius: 6px;
      transition: all 0.15s ease;
      font-size: 13px;
      color: #1e293b;
    }
    
    .dropdown-option:hover {
      background: #dbeafe;
      color: #1e40af;
    }
    
    .dropdown-option.selected {
      background: #3b82f6;
      color: white;
      font-weight: 600;
    }
    
    .dropdown-option.selected:hover {
      background: #2563eb;
    }
    
    /* No Results */
    .no-results {
      padding: 16px;
      text-align: center;
      color: #64748b;
      font-size: 13px;
    }
    
    /* Create New Option Hint */
    .create-hint {
      padding: 8px 10px;
      font-size: 12px;
      color: #3b82f6;
      border-top: 1px solid #e2e8f0;
      background: #f8fafc;
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .create-hint i {
      font-size: 10px;
    }
    
    /* Button Styles */
    .btn-primary {
      background: #3b82f6;
      border: none;
      border-radius: 10px;
      padding: 12px 24px;
      font-weight: 600;
      transition: all 0.2s;
      color: white;
    }
    
    .btn-primary:hover {
      background: #2563eb;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      color: white;
    }
    
    .btn-secondary {
      background: #f1f5f9;
      border: 1px solid #e2e8f0;
      color: #0f172a;
      border-radius: 10px;
      padding: 10px 24px;
      font-weight: 600;
      transition: all 0.2s;
      text-decoration: none;
    }
    
    .btn-secondary:hover {
      background: #e2e8f0;
      border-color: #cbd5e1;
      color: #0f172a;
    }
    
    .btn-warning {
      background: #f59e0b;
      border: none;
      color: white;
      border-radius: 10px;
      padding: 12px 24px;
      font-weight: 600;
      transition: all 0.2s;
    }
    
    .btn-warning:hover {
      background: #d97706;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
      color: white;
    }
    
    /* Table Styles */
    .table-container {
      overflow-x: auto;
      position: relative;
    }
    
    .table-modern {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      table-layout: fixed;
    }
    
    .table-modern thead {
      background: #f8fafc;
    }
    
    .table-modern th {
      padding: 16px;
      text-align: left;
      font-size: 13px;
      font-weight: 700;
      color: #475569;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      border-bottom: 2px solid #e2e8f0;
      position: relative;
      resize: horizontal;
      overflow: hidden;
    }
    
    .table-modern th .resizer {
      position: absolute;
      top: 0;
      right: 0;
      width: 5px;
      height: 100%;
      cursor: col-resize;
      user-select: none;
    }
    
    .table-modern th .resizer:hover {
      background: #3b82f6;
    }
    
    .table-modern td {
      padding: 16px;
      border-bottom: 1px solid #e2e8f0;
      font-size: 14px;
      color: #1e293b;
      transition: background-color 0.3s ease;
    }
    
    .table-modern tr:hover {
      background: #f8fafc;
    }
    
    .table-modern td.editable {
      cursor: text;
      background: #fef3c7;
      outline: none;
    }
    
    .table-modern td.editable:focus {
      background: #fef08a;
      box-shadow: inset 0 0 0 2px #facc15;
    }
    
    .table-modern select {
      width: 100%;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 8px 12px;
      font-size: 13px;
      background: white;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .table-modern select:disabled {
      background: #f8fafc;
      cursor: not-allowed;
      opacity: 0.6;
    }
    
    .table-modern select:not(:disabled):hover {
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    .add-row-btn {
      margin-top: 16px;
      background: white;
      border: 2px dashed #cbd5e1;
      border-radius: 10px;
      padding: 16px 24px;
      font-weight: 600;
      color: #64748b;
      transition: all 0.2s;
      cursor: pointer;
      width: 100%;
      display: none;
    }
    
    .add-row-btn:hover {
      border-color: #3b82f6;
      color: #3b82f6;
      background: #f0f9ff;
    }
    
    .add-row-btn i {
      margin-right: 8px;
    }
  </style>
</head>
<body>
  <%- include('../partials/sidebar') %>
  
  <div class="main-content">
    <div id="notificationContainer" class="notification-container"></div>
    
    <div class="page-header">
      <h1 class="page-title">Audit Universe - <%= auditee.name %></h1>
      <button id="editBtn" class="btn btn-primary" onclick="toggleEdit()">
        <i class="bi bi-pencil"></i> Enable Edit
      </button>
    </div>
    
   <!-- Search and Filter Section -->
<div class="search-filter-section">
  <div class="search-box">
    <i class="bi bi-search search-icon"></i>
    <input type="text" id="searchInput" class="search-input" placeholder="Search by audit area, process, or procedure...">
  </div>
  
  <div class="filter-group">
    <select id="departmentFilter" class="filter-select">
      <option value="">All Departments</option>
      <% departments.forEach(dept => { %>
        <option value="<%= dept.department_name %>"><%= dept.department_name %></option>
      <% }) %>
    </select>
    
    <select id="areaFilter" class="filter-select">
      <option value="">All Audit Areas</option>
    </select>
    
    <button class="clear-filters-btn" onclick="clearFilters()">
      <i class="bi bi-x-circle"></i> Clear
    </button>
  </div>
</div>

<div class="card-modern">
  <div class="table-container">
  <table class="table-modern">
    <thead>
      <tr>
        <th style="width: 200px;">
          Department
          <div class="resizer"></div>
        </th>
        <th style="width: 200px;">
          Audit Area
          <div class="resizer"></div>
        </th>
        <th style="width: 250px;">
          Process
          <div class="resizer"></div>
        </th>
        <th style="width: 200px;">
          Inherent Risk
          <div class="resizer"></div>
        </th>
        <th style="width: 250px;">
          Control Measure
          <div class="resizer"></div>
        </th>
        <th style="width: 250px;">
          Audit Procedure
          <div class="resizer"></div>
        </th>
      </tr>
    </thead>
    <tbody>
  <% if (universe && universe.length > 0) { %>
    <% universe.forEach(entry => { %>
      <tr data-id="<%= entry.id %>">
        <td data-field="department_id">
          <div class="custom-dropdown" data-dropdown="department">
            <select class="department-select" data-original="<%= entry.department_id %>" disabled>
              <% departments.forEach(dept => { %>
                <option value="<%= dept.id %>" <%= entry.department_id == dept.id ? 'selected' : '' %>>
                  <%= dept.department_name %>
                </option>
              <% }) %>
            </select>
            
            <div class="dropdown-button">
              <span class="dropdown-button-text selected">
                <%= departments.find(d => d.id == entry.department_id)?.department_name || 'Select Department' %>
              </span>
              <i class="bi bi-chevron-down dropdown-arrow"></i>
            </div>
            
            <div class="dropdown-menu-custom">
              <div class="dropdown-search">
                <input type="text" placeholder="Search..." class="search-input">
              </div>
              <div class="dropdown-options"></div>
            </div>
          </div>
        </td>
        <td data-field="audit_area">
          <div class="custom-dropdown" data-dropdown="audit_area" data-allow-create="true">
            <select class="audit-area-select" data-original="<%= entry.audit_area %>" disabled>
              <% 
              const uniqueAuditAreas = [...new Set(universe.map(u => u.audit_area).filter(a => a))];
              uniqueAuditAreas.forEach(area => { %>
                <option value="<%= area %>" <%= entry.audit_area === area ? 'selected' : '' %>>
                  <%= area %>
                </option>
              <% }); %>
            </select>
            
            <div class="dropdown-button">
              <span class="dropdown-button-text <%= entry.audit_area ? 'selected' : '' %>">
                <%= entry.audit_area || 'Select or Type Area' %>
              </span>
              <i class="bi bi-chevron-down dropdown-arrow"></i>
            </div>
            
            <div class="dropdown-menu-custom">
              <div class="dropdown-search">
                <input type="text" placeholder="Search or type new..." class="search-input" data-allow-create="true">
              </div>
              <div class="dropdown-options"></div>
            </div>
          </div>
        </td>
        <td data-field="process"><%= entry.process || '-' %></td>
        <td data-field="inherent_risk"><%= entry.inherent_risk || '-' %></td>
        <td data-field="control_measure"><%= entry.control_measure || '-' %></td>
        <td data-field="audit_procedure"><%= entry.audit_procedure || '-' %></td>
      </tr>
    <% }) %>
  <% } %>
</tbody>
  </table>
</div>
      
      <button type="button" class="add-row-btn" onclick="addNewRow()">
        <i class="bi bi-plus-circle"></i> Add New Row
      </button>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function showNotification(message, type = 'success') {
      const container = document.getElementById('notificationContainer');
      
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      const icon = type === 'success' ? 
        '<i class="bi bi-check-circle-fill"></i>' : 
        '<i class="bi bi-exclamation-triangle-fill"></i>';
      
      notification.innerHTML = `
        <div class="notification-icon">${icon}</div>
        <div class="notification-message">${message}</div>
        <button class="notification-close" onclick="dismissNotification(this)">
          <i class="bi bi-x"></i>
        </button>
      `;
      
      container.appendChild(notification);
      
      setTimeout(() => {
        dismissNotification(notification.querySelector('.notification-close'));
      }, 3000);
    }
    
    function dismissNotification(button) {
      const notification = button.closest('.notification');
      notification.classList.add('hiding');
      
      setTimeout(() => {
        notification.remove();
      }, 400);
    }
    
    <% if (typeof success_msg !== 'undefined' && success_msg.length > 0) { %>
      showNotification('<%= success_msg %>', 'success');
    <% } %>
    
    <% if (typeof error_msg !== 'undefined' && error_msg.length > 0) { %>
      showNotification('<%= error_msg %>', 'error');
    <% } %>
    
    <% if (typeof error !== 'undefined' && error.length > 0) { %>
      showNotification('<%= error %>', 'error');
    <% } %>
    
    // Edit mode state
    let isEditMode = false;
    let saveTimeout = null;
    
    // Toggle edit mode
    function toggleEdit() {
      isEditMode = !isEditMode;
      const editBtn = document.getElementById('editBtn');
      const editableCells = document.querySelectorAll('td:not([data-field="department_id"]):not([data-field="audit_area"])');
      const customDropdowns = document.querySelectorAll('.custom-dropdown');
      const addRowBtn = document.querySelector('.add-row-btn');
      
      if (isEditMode) {
        editBtn.innerHTML = '<i class="bi bi-lock-fill"></i> Disable Edit';
        editBtn.classList.add('btn-warning');
        editBtn.classList.remove('btn-primary');
        
        // Show add row button
        if (addRowBtn) addRowBtn.style.display = 'block';
        
        // Enable custom dropdowns
        customDropdowns.forEach(container => {
          const select = container.querySelector('select');
          const button = container.querySelector('.dropdown-button');
          if (select && button) {
            select.disabled = false;
            button.style.pointerEvents = 'auto';
            button.style.opacity = '1';
            // Initialize dropdown
            initializeDropdown(container);
          }
        });
        
        // Enable editable cells
        editableCells.forEach(cell => {
          cell.contentEditable = true;
          cell.classList.add('editable');
          cell.addEventListener('input', handleCellEdit);
          cell.addEventListener('blur', handleCellBlur);
        });
        
        showNotification('Edit mode enabled. Changes will auto-save.', 'success');
      } else {
        editBtn.innerHTML = '<i class="bi bi-pencil"></i> Enable Edit';
        editBtn.classList.remove('btn-warning');
        editBtn.classList.add('btn-primary');
        
        // Hide add row button
        if (addRowBtn) addRowBtn.style.display = 'none';
        
        // Disable custom dropdowns
        customDropdowns.forEach(container => {
          const select = container.querySelector('select');
          const button = container.querySelector('.dropdown-button');
          const menu = container.querySelector('.dropdown-menu-custom');
          if (select && button) {
            select.disabled = true;
            button.style.pointerEvents = 'none';
            button.style.opacity = '0.6';
            if (menu) menu.classList.remove('show');
            button.classList.remove('active');
          }
        });
        
        // Disable editable cells
        editableCells.forEach(cell => {
          cell.contentEditable = false;
          cell.classList.remove('editable');
          cell.removeEventListener('input', handleCellEdit);
          cell.removeEventListener('blur', handleCellBlur);
        });
        
        showNotification('Edit mode disabled', 'success');
      }
    }
    
    // Custom Dropdown Class
    class CustomDropdown {
      constructor(element) {
        this.container = element;
        this.select = this.container.querySelector('select');
        this.button = this.container.querySelector('.dropdown-button');
        this.buttonText = this.button.querySelector('.dropdown-button-text');
        this.menu = this.container.querySelector('.dropdown-menu-custom');
        this.searchInput = this.menu.querySelector('.search-input');
        this.optionsContainer = this.menu.querySelector('.dropdown-options');
        this.allowCreate = this.container.dataset.allowCreate === 'true';
        this.options = Array.from(this.select.options);
        
        this.init();
      }
      
      init() {
        this.renderOptions();
        this.attachEvents();
      }
      
      renderOptions(filter = '') {
        const filteredOptions = this.options.filter(option => 
          option.text.toLowerCase().includes(filter.toLowerCase())
        );
        
        let html = '';
        
        if (filteredOptions.length === 0 && !this.allowCreate) {
          html = '<div class="no-results">No results found</div>';
        } else if (filteredOptions.length === 0 && this.allowCreate && filter) {
          html = '<div class="no-results">No results found</div>';
        } else {
          html = filteredOptions.map(option => {
            const isSelected = option.value === this.select.value;
            return `
              <div class="dropdown-option ${isSelected ? 'selected' : ''}" data-value="${option.value}">
                ${option.text}
              </div>
            `;
          }).join('');
        }
        
        // Add create hint if allowed and filter has text
        if (this.allowCreate && filter && !filteredOptions.find(o => o.text.toLowerCase() === filter.toLowerCase())) {
          html += `<div class="create-hint"><i class="bi bi-plus-circle"></i> Press Enter to create "${filter}"</div>`;
        }
        
        this.optionsContainer.innerHTML = html;
      }
      
      attachEvents() {
        this.button.addEventListener('click', (e) => {
          e.stopPropagation();
          if (!this.select.disabled) {
            this.toggle();
          }
        });
        
        this.searchInput.addEventListener('input', (e) => {
          this.renderOptions(e.target.value);
          this.attachOptionEvents();
        });
        
        // Handle Enter key for creating new options
        if (this.allowCreate) {
          this.searchInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
              const value = e.target.value.trim();
              if (value && !this.options.find(o => o.text.toLowerCase() === value.toLowerCase())) {
                this.createNewOption(value);
              }
            }
          });
        }
        
        this.attachOptionEvents();
        
        document.addEventListener('click', (e) => {
          if (!this.container.contains(e.target)) {
            this.close();
          }
        });
      }
      
      createNewOption(text) {
        // Create new option element
        const newOption = document.createElement('option');
        newOption.value = text;
        newOption.text = text;
        this.select.appendChild(newOption);
        this.options.push(newOption);
        
        // Select the new option
        this.selectOption(text, text);
        
        // Save to backend
        const row = this.container.closest('tr');
        const cell = this.container.closest('td');
        const entryId = row.dataset.id;
        const field = cell.dataset.field;
        
        this.saveChange(entryId, field, text);
        
        this.close();
      }
      
      attachOptionEvents() {
        this.optionsContainer.querySelectorAll('.dropdown-option').forEach(option => {
          option.addEventListener('click', () => {
            const value = option.dataset.value;
            const text = option.textContent.trim();
            
            this.selectOption(value, text);
            
            // Save to backend
            const row = this.container.closest('tr');
            const cell = this.container.closest('td');
            const entryId = row.dataset.id;
            const field = cell.dataset.field;
            
            this.saveChange(entryId, field, value);
            
            this.close();
          });
        });
      }
      
      selectOption(value, text) {
        this.select.value = value;
        this.buttonText.textContent = text;
        this.buttonText.classList.add('selected');
        
        this.renderOptions(this.searchInput.value);
        this.attachOptionEvents();
      }
      
      async saveChange(entryId, field, value) {
        const cell = this.container.closest('td');
        
        try {
          const response = await fetch(`/auditees/<%= auditee.id %>/audit-universe/${entryId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              field: field,
              value: value
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Visual feedback
            cell.style.background = '#dcfce7';
            setTimeout(() => {
              cell.style.background = '';
            }, 500);
          } else {
            showNotification(result.error || 'Error saving changes', 'error');
          }
        } catch (error) {
          console.error('Save error:', error);
          showNotification('Error saving changes', 'error');
        }
      }
      
      toggle() {
        const isOpen = this.menu.classList.contains('show');
        if (isOpen) {
          this.close();
        } else {
          this.open();
        }
      }
      
      open() {
        // Close all other dropdowns
        document.querySelectorAll('.dropdown-menu-custom.show').forEach(menu => {
          menu.classList.remove('show');
        });
        document.querySelectorAll('.dropdown-button.active').forEach(btn => {
          btn.classList.remove('active');
        });
        
        this.menu.classList.add('show');
        this.button.classList.add('active');
        this.searchInput.value = '';
        this.searchInput.focus();
        this.renderOptions();
        this.attachOptionEvents();
      }
      
      close() {
        this.menu.classList.remove('show');
        this.button.classList.remove('active');
      }
    }
    
    // Initialize dropdown
    function initializeDropdown(container) {
      return new CustomDropdown(container);
    }
    
    // Handle cell edit with debounced auto-save
    function handleCellEdit(e) {
      const cell = e.target;
      
      // Clear existing timeout
      if (saveTimeout) {
        clearTimeout(saveTimeout);
      }
      
      // Set new timeout for auto-save (1 second after user stops typing)
      saveTimeout = setTimeout(() => {
        saveCellData(cell);
      }, 1000);
    }
    
    // Handle cell blur (save immediately when user leaves the cell)
    function handleCellBlur(e) {
      if (saveTimeout) {
        clearTimeout(saveTimeout);
      }
      saveCellData(e.target);
    }
    
    // Save cell data to backend
    async function saveCellData(cell) {
      const row = cell.closest('tr');
      const entryId = row.dataset.id;
      const field = cell.dataset.field;
      const value = cell.textContent.trim() === '-' ? '' : cell.textContent.trim();
      
      try {
        const response = await fetch(`/auditees/<%= auditee.id %>/audit-universe/${entryId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            field: field,
            value: value
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Visual feedback - briefly highlight the cell
          cell.style.background = '#dcfce7';
          setTimeout(() => {
            cell.style.background = '';
          }, 500);
        } else {
          showNotification(result.error || 'Error saving changes', 'error');
        }
      } catch (error) {
        console.error('Save error:', error);
        showNotification('Error saving changes', 'error');
      }
    }
    
    // Resizable columns functionality
    const resizers = document.querySelectorAll('.resizer');
    
    resizers.forEach(resizer => {
      let startX, startWidth;
      
      resizer.addEventListener('mousedown', (e) => {
        e.preventDefault();
        const th = resizer.parentElement;
        startX = e.pageX;
        startWidth = th.offsetWidth;
        
        const doDrag = (e) => {
          const width = startWidth + (e.pageX - startX);
          if (width > 50) {
            th.style.width = width + 'px';
          }
        };
        
        const stopDrag = () => {
          document.removeEventListener('mousemove', doDrag);
          document.removeEventListener('mouseup', stopDrag);
        };
        
        document.addEventListener('mousemove', doDrag);
        document.addEventListener('mouseup', stopDrag);
      });
    });
    
    // Add new row functionality
async function addNewRow() {
  if (!isEditMode) {
    showNotification('Please enable edit mode first', 'error');
    return;
  }
  
  try {
    const response = await fetch(`/auditees/<%= auditee.id %>/audit-universe`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        department_id: <%= departments[0]?.id || 'null' %>,
        audit_area: '',
        process: '',
        inherent_risk: '',
        control_measure: '',
        audit_procedure: ''
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Get the new row ID from backend
      const newRowId = result.id;
      
      // Create new row HTML
      const tbody = document.querySelector('.table-modern tbody');
      const newRow = document.createElement('tr');
      newRow.dataset.id = newRowId;
      
      newRow.innerHTML = `
        <td data-field="department_id">
          <div class="custom-dropdown" data-dropdown="department">
            <select class="department-select" data-original="<%= departments[0]?.id || '' %>">
              <% departments.forEach(dept => { %>
                <option value="<%= dept.id %>"><%= dept.department_name %></option>
              <% }) %>
            </select>
            
            <div class="dropdown-button">
              <span class="dropdown-button-text selected">
                <%= departments[0]?.department_name || 'Select Department' %>
              </span>
              <i class="bi bi-chevron-down dropdown-arrow"></i>
            </div>
            
            <div class="dropdown-menu-custom">
              <div class="dropdown-search">
                <input type="text" placeholder="Search..." class="search-input">
              </div>
              <div class="dropdown-options"></div>
            </div>
          </div>
        </td>
        <td data-field="audit_area">
          <div class="custom-dropdown" data-dropdown="audit_area" data-allow-create="true">
            <select class="audit-area-select" data-original="">
            </select>
            
            <div class="dropdown-button">
              <span class="dropdown-button-text">Select or Type Area</span>
              <i class="bi bi-chevron-down dropdown-arrow"></i>
            </div>
            
            <div class="dropdown-menu-custom">
              <div class="dropdown-search">
                <input type="text" placeholder="Search or type new..." class="search-input" data-allow-create="true">
              </div>
              <div class="dropdown-options"></div>
            </div>
          </div>
        </td>
        <td data-field="process" contenteditable="true" class="editable">-</td>
        <td data-field="inherent_risk" contenteditable="true" class="editable">-</td>
        <td data-field="control_measure" contenteditable="true" class="editable">-</td>
        <td data-field="audit_procedure" contenteditable="true" class="editable">-</td>
      `;
      
      tbody.appendChild(newRow);
      
      // Initialize dropdowns for new row
      const dropdowns = newRow.querySelectorAll('.custom-dropdown');
      dropdowns.forEach(dropdown => {
        initializeDropdown(dropdown);
      });
      
      // Add event listeners to editable cells
      const editableCells = newRow.querySelectorAll('.editable');
      editableCells.forEach(cell => {
        cell.addEventListener('input', handleCellEdit);
        cell.addEventListener('blur', handleCellBlur);
      });
      
      showNotification('New row added successfully', 'success');
      
      // Scroll to the new row
      newRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
      
    } else {
      showNotification('Error adding row', 'error');
    }
  } catch (error) {
    console.error('Add row error:', error);
    showNotification('Error adding row', 'error');
  }
}
// Populate audit area filter
document.addEventListener('DOMContentLoaded', () => {
  const areaFilter = document.getElementById('areaFilter');
  const rows = document.querySelectorAll('.table-modern tbody tr');
  const areas = new Set();
  
  rows.forEach(row => {
    const areaCell = row.querySelector('[data-field="audit_area"]');
    if (areaCell) {
      const areaText = areaCell.textContent.trim();
      if (areaText && areaText !== '-' && areaText !== 'Select or Type Area') {
        areas.add(areaText);
      }
    }
  });
  
  Array.from(areas).sort().forEach(area => {
    const option = document.createElement('option');
    option.value = area;
    option.textContent = area;
    areaFilter.appendChild(option);
  });
});

// Search and filter functionality
function filterTable() {
  const searchValue = document.getElementById('searchInput').value.toLowerCase();
  const departmentValue = document.getElementById('departmentFilter').value.toLowerCase();
  const areaValue = document.getElementById('areaFilter').value.toLowerCase();
  
  const rows = document.querySelectorAll('.table-modern tbody tr');
  let visibleCount = 0;
  
  rows.forEach(row => {
    const deptCell = row.querySelector('[data-field="department_id"]');
    const areaCell = row.querySelector('[data-field="audit_area"]');
    const processCell = row.querySelector('[data-field="process"]');
    const procedureCell = row.querySelector('[data-field="audit_procedure"]');
    
    const deptText = deptCell ? deptCell.textContent.toLowerCase() : '';
    const areaText = areaCell ? areaCell.textContent.toLowerCase() : '';
    const processText = processCell ? processCell.textContent.toLowerCase() : '';
    const procedureText = procedureCell ? procedureCell.textContent.toLowerCase() : '';
    
    const matchesSearch = 
      areaText.includes(searchValue) ||
      processText.includes(searchValue) ||
      procedureText.includes(searchValue);
    
    const matchesDepartment = !departmentValue || deptText.includes(departmentValue);
    const matchesArea = !areaValue || areaText === areaValue;
    
    if (matchesSearch && matchesDepartment && matchesArea) {
      row.style.display = '';
      visibleCount++;
    } else {
      row.style.display = 'none';
    }
  });
}

function clearFilters() {
  document.getElementById('searchInput').value = '';
  document.getElementById('departmentFilter').value = '';
  document.getElementById('areaFilter').value = '';
  filterTable();
}

document.getElementById('searchInput').addEventListener('input', filterTable);
document.getElementById('departmentFilter').addEventListener('change', filterTable);
document.getElementById('areaFilter').addEventListener('change', filterTable);
  </script>
</body>
</html>
