<!DOCTYPE html>
<html>
<head>
  <title><%= title %> - Internal Audit Portal</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.css">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    body {
      background-color: #f8f9fa;
    }

    .top-nav {
      background: white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      padding: 1rem 0;
      margin-bottom: 2rem;
    }

    .page-header {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .ai-prompt-section {
      background: linear-gradient(135deg, #1a73e8 0%, #174ea6 100%);
      color: white;
      padding: 3rem;
      border-radius: 12px;
      margin-bottom: 2rem;
      text-align: center;
      box-shadow: 0 4px 12px rgba(26, 115, 232, 0.2);
    }
    
    .ai-prompt-section h4 {
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .ai-prompt-section p {
      opacity: 0.9;
      margin-bottom: 1.5rem;
    }
    
    .ai-input-container {
      max-width: 700px;
      margin: 0 auto;
      position: relative;
    }
    
    .ai-textarea {
      width: 100%;
      padding: 1rem 60px 1rem 1rem;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      resize: none;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      transition: all 0.3s;
    }
    
    .ai-textarea:focus {
      outline: none;
      box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    }
    
    .generate-btn {
      position: absolute;
      right: 8px;
      bottom: 8px;
      background: linear-gradient(135deg, #1a73e8 0%, #174ea6 100%);
      border: none;
      color: white;
      padding: 10px 20px;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s;
    }
    
    .generate-btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(26, 115, 232, 0.3);
    }
    
    .generate-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    
    .builder-section {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    .wp-name-input {
      border: none;
      border-bottom: 2px solid #e0e0e0;
      font-size: 1.75rem;
      font-weight: 600;
      padding: 0.75rem 0;
      width: 100%;
      margin-bottom: 1.5rem;
      transition: border-color 0.3s;
    }
    
    .wp-name-input:focus {
      outline: none;
      border-bottom-color: #1a73e8;
    }
    
    .columns-container {
      margin: 1.5rem 0;
    }
    
    .column-card {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 0.75rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      cursor: move;
      transition: all 0.2s;
      border: 2px solid transparent;
    }
    
    .column-card:hover {
      background: #e9ecef;
      transform: translateX(4px);
      border-color: #1a73e8;
    }
    
    .column-card.sortable-ghost {
      opacity: 0.4;
    }
    
    .column-card.sortable-drag {
      box-shadow: 0 8px 16px rgba(0,0,0,0.15);
      transform: scale(1.02);
    }
    
    .drag-icon {
      color: #999;
      font-size: 1.25rem;
      cursor: grab;
    }
    
    .column-icon {
      width: 40px;
      height: 40px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.25rem;
      flex-shrink: 0;
    }
    
    .column-content {
      flex: 1;
    }
    
    .column-name {
      font-weight: 600;
      font-size: 1rem;
      margin-bottom: 0.25rem;
      color: #212529;
    }
    
    .column-type {
      color: #6c757d;
      font-size: 0.875rem;
    }
    
    .column-actions {
      display: flex;
      gap: 0.5rem;
    }

    .column-actions .btn {
      border-radius: 6px;
      padding: 0.375rem 0.75rem;
    }
    
    .add-column-btn {
      background: white;
      border: 2px dashed #dee2e6;
      border-radius: 8px;
      padding: 1.25rem;
      text-align: center;
      cursor: pointer;
      transition: all 0.2s;
      color: #6c757d;
    }
    
    .add-column-btn:hover {
      background: #f8f9fa;
      border-color: #1a73e8;
      color: #1a73e8;
    }
    
    .preview-card {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      position: sticky;
      top: 20px;
    }
    
    .preview-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      font-size: 0.875rem;
    }
    
    .preview-table th {
      background: #1a73e8;
      color: white;
      padding: 0.75rem;
      text-align: left;
      font-weight: 600;
    }
    
    .preview-table th:first-child {
      border-radius: 8px 0 0 0;
    }
    
    .preview-table th:last-child {
      border-radius: 0 8px 0 0;
    }
    
    .preview-table td {
      padding: 0.75rem;
      border-bottom: 1px solid #e0e0e0;
      color: #999;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255,255,255,0.95);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      display: none;
    }
    
    .loading-overlay.active {
      display: flex;
    }
    
    .ai-thinking {
      font-size: 1.5rem;
      font-weight: 600;
      margin-top: 1.5rem;
      color: #1a73e8;
    }
    
    .example-prompts {
      display: flex;
      gap: 0.75rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-top: 1rem;
    }
    
    .example-chip {
      background: rgba(255,255,255,0.2);
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.2s;
      border: 1px solid rgba(255,255,255,0.3);
    }
    
    .example-chip:hover {
      background: rgba(255,255,255,0.3);
      transform: translateY(-2px);
    }

    .btn-primary {
      background: linear-gradient(135deg, #1a73e8 0%, #174ea6 100%);
      border: none;
      border-radius: 6px;
      padding: 0.5rem 1.5rem;
      font-weight: 500;
      transition: all 0.3s;
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(26, 115, 232, 0.3);
    }

    .btn-secondary {
      border-radius: 6px;
      padding: 0.5rem 1.5rem;
      font-weight: 500;
    }

    .modal-content {
      border-radius: 12px;
      border: none;
    }

    .modal-header {
      border-bottom: 1px solid #e9ecef;
      padding: 1.5rem;
    }

    .modal-body {
      padding: 1.5rem;
    }

    .modal-footer {
      border-top: 1px solid #e9ecef;
      padding: 1.5rem;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar') %>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="spinner-border text-primary" style="width: 4rem; height: 4rem;" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <div class="ai-thinking">AI is creating your working paper...</div>
  </div>
  
  <%- include('../partials/messages') %>
  
  <div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="page-header">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h2 class="mb-1"><i class="bi bi-magic me-2"></i>AI Working Paper Builder</h2>
          <p class="text-muted mb-0">Describe your needs and let AI create the perfect working paper</p>
        </div>
        <a href="/working-papers" class="btn btn-secondary">
          <i class="bi bi-arrow-left me-1"></i> Back to List
        </a>
      </div>
    </div>

    <!-- AI Prompt Section -->
    <div class="ai-prompt-section">
      <h4>What working paper do you need?</h4>
      <p>Describe your requirements in plain English and AI will generate the structure for you</p>
      
      <div class="ai-input-container">
        <textarea 
          id="aiPrompt" 
          class="ai-textarea" 
          rows="3"
          placeholder="E.g., Create a cash count working paper with date, denomination, quantity, and amount columns with auto-calculation"></textarea>
        <button class="generate-btn" onclick="generateWithAI()">
          <i class="bi bi-stars me-1"></i> Generate
        </button>
      </div>
      
      <div class="example-prompts">
        <div class="example-chip" onclick="setPrompt('Create a cash count working paper')">
          Cash Count
        </div>
        <div class="example-chip" onclick="setPrompt('Create an inventory verification working paper')">
          Inventory Verification
        </div>
        <div class="example-chip" onclick="setPrompt('Create an expense review working paper')">
          Expense Review
        </div>
      </div>
    </div>

    <form id="wpForm" action="/working-papers/create-ai" method="POST">
      <div class="row">
        <!-- Left Side - Builder -->
        <div class="col-lg-7">
          <div class="builder-section">
            <input 
              type="text" 
              id="wpName" 
              name="name" 
              class="wp-name-input" 
              placeholder="Working Paper Name" 
              required>
            
            <div class="mb-4">
              <label class="form-label fw-semibold">Allow Row Insertion</label>
              <div>
                <div class="form-check form-check-inline">
                  <input class="form-check-input" type="radio" name="allow_row_insert" id="allow_yes" value="true" checked>
                  <label class="form-check-label" for="allow_yes">
                    Yes - Auditors can add rows
                  </label>
                </div>
                <div class="form-check form-check-inline">
                  <input class="form-check-input" type="radio" name="allow_row_insert" id="allow_no" value="false">
                  <label class="form-check-label" for="allow_no">
                    No - Fixed structure
                  </label>
                </div>
              </div>
            </div>
            
            <hr class="my-4">
            
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h5 class="mb-0">Properties</h5>
              <button type="button" class="btn btn-primary btn-sm" onclick="showColumnModal()">
                <i class="bi bi-plus-circle me-1"></i> Add Property
              </button>
            </div>
            
            <div class="columns-container" id="columnsContainer">
              <div class="text-center py-5 text-muted">
                <i class="bi bi-magic" style="font-size: 3rem;"></i>
                <p class="mt-3">Use AI to generate properties or add manually</p>
              </div>
            </div>
            
            <div class="add-column-btn" onclick="showColumnModal()">
              <i class="bi bi-plus-circle me-2"></i>
              Add Property Manually
            </div>
          </div>
        </div>
        
        <!-- Right Side - Preview -->
        <div class="col-lg-5">
          <div class="preview-card">
            <h5 class="mb-3">Preview</h5>
            <div id="previewArea">
              <p class="text-muted text-center py-4">Preview will appear here</p>
            </div>
            <hr class="my-4">
            <button type="submit" class="btn btn-primary w-100">
              <i class="bi bi-check2-circle me-2"></i> Create Working Paper
            </button>
          </div>
        </div>
      </div>
    </form>
  </div>

  <!-- Add Column Modal -->
  <div class="modal fade" id="columnModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Add Property</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label class="form-label">Property Name</label>
            <input type="text" class="form-control" id="modalColName" placeholder="e.g., Item Description">
          </div>
          
          <div class="mb-3">
            <label class="form-label">Type</label>
            <select class="form-select" id="modalColType" onchange="updateModalOptions()">
              <option value="text">Text</option>
              <option value="number">Number</option>
              <option value="date">Date</option>
              <option value="select">Select</option>
              <option value="multiselect">Multi-Select</option>
              <option value="file">File Upload</option>
              <option value="url">URL</option>
              <option value="formula">Formula</option>
            </select>
          </div>
          
          <div class="mb-3" id="modalOptions" style="display: none;">
            <label class="form-label">Options (one per line)</label>
            <textarea class="form-control" id="modalColOptions" rows="3"></textarea>
          </div>
          
          <div class="mb-3" id="modalFormula" style="display: none;">
            <label class="form-label">Formula</label>
            <input type="text" class="form-control" id="modalColFormula" placeholder="e.g., col1 + col2">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="addColumnFromModal()">Add Property</button>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <script>
    const columns = [];
    const columnTypes = {
      'text': { icon: 'bi-fonts', color: '#2eaadc', label: 'Text' },
      'number': { icon: 'bi-123', color: '#ff6b6b', label: 'Number' },
      'date': { icon: 'bi-calendar3', color: '#51cf66', label: 'Date' },
      'select': { icon: 'bi-check-circle', color: '#845ef7', label: 'Select' },
      'multiselect': { icon: 'bi-check2-square', color: '#ae3ec9', label: 'Multi-Select' },
      'file': { icon: 'bi-paperclip', color: '#fab005', label: 'File' },
      'url': { icon: 'bi-link-45deg', color: '#20c997', label: 'URL' },
      'formula': { icon: 'bi-calculator', color: '#868e96', label: 'Formula' }
    };
    
    const modal = new bootstrap.Modal(document.getElementById('columnModal'));
    let sortable = null;
    
    function setPrompt(text) {
      document.getElementById('aiPrompt').value = text;
      document.getElementById('aiPrompt').focus();
    }
    
    async function generateWithAI() {
      const prompt = document.getElementById('aiPrompt').value.trim();
      
      if (!prompt) {
        alert('Please describe what working paper you need');
        return;
      }
      
      document.getElementById('loadingOverlay').classList.add('active');
      
      try {
        const response = await fetch('/working-papers/generate-ai', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ prompt })
        });
        
        const data = await response.json();
        
        if (data.success) {
          document.getElementById('wpName').value = data.name;
          columns.length = 0;
          columns.push(...data.columns);
          renderColumns();
        } else {
          alert('Error generating working paper. Please try again.');
        }
      } catch (error) {
        console.error(error);
        alert('Error connecting to AI. Please try again.');
      } finally {
        document.getElementById('loadingOverlay').classList.remove('active');
      }
    }
    
    function renderColumns() {
      const container = document.getElementById('columnsContainer');
      container.innerHTML = '';
      
      if (columns.length === 0) {
        container.innerHTML = `
          <div class="text-center py-5 text-muted">
            <i class="bi bi-magic" style="font-size: 3rem;"></i>
            <p class="mt-3">Use AI to generate properties or add manually</p>
          </div>
        `;
        updatePreview();
        return;
      }
      
      columns.forEach((col, index) => {
        const typeInfo = columnTypes[col.type];
        const div = document.createElement('div');
        div.className = 'column-card';
        div.dataset.index = index;
        
        div.innerHTML = `
          <i class="bi bi-grip-vertical drag-icon"></i>
          <div class="column-icon" style="background: ${typeInfo.color}20; color: ${typeInfo.color};">
            <i class="${typeInfo.icon}"></i>
          </div>
          <div class="column-content">
            <div class="column-name">${col.name}</div>
            <div class="column-type">${typeInfo.label}</div>
          </div>
          <div class="column-actions">
            <button type="button" class="btn btn-sm btn-light" onclick="editColumn(${index})">
              <i class="bi bi-pencil"></i>
            </button>
            <button type="button" class="btn btn-sm btn-light text-danger" onclick="deleteColumn(${index})">
              <i class="bi bi-trash"></i>
            </button>
          </div>
        `;
        
        container.appendChild(div);
      });
      
      // Initialize drag and drop
      if (sortable) sortable.destroy();
      sortable = new Sortable(container, {
        animation: 150,
        handle: '.drag-icon',
        onEnd: function(evt) {
          const item = columns.splice(evt.oldIndex, 1)[0];
          columns.splice(evt.newIndex, 0, item);
          renderColumns();
        }
      });
      
      updatePreview();
    }
    
    function updatePreview() {
      const preview = document.getElementById('previewArea');
      
      if (columns.length === 0) {
        preview.innerHTML = '<p class="text-muted text-center py-4">Preview will appear here</p>';
        return;
      }
      
      let html = '<div style="overflow-x: auto;"><table class="preview-table"><thead><tr>';
      columns.forEach(col => {
        html += `<th><i class="${columnTypes[col.type].icon}"></i> ${col.name}</th>`;
      });
      html += '</tr></thead><tbody><tr>';
      columns.forEach(() => {
        html += '<td>-</td>';
      });
      html += '</tr></tbody></table></div>';
      
      preview.innerHTML = html;
    }
    
    window.showColumnModal = function() {
      document.getElementById('modalColName').value = '';
      document.getElementById('modalColType').value = 'text';
      document.getElementById('modalColOptions').value = '';
      document.getElementById('modalColFormula').value = '';
      updateModalOptions();
      modal.show();
    }
    
    window.updateModalOptions = function() {
      const type = document.getElementById('modalColType').value;
      document.getElementById('modalOptions').style.display = 
        (type === 'select' || type === 'multiselect') ? 'block' : 'none';
      document.getElementById('modalFormula').style.display = 
        (type === 'formula') ? 'block' : 'none';
    }
    
    window.addColumnFromModal = function() {
      const name = document.getElementById('modalColName').value.trim();
      const type = document.getElementById('modalColType').value;
      const options = document.getElementById('modalColOptions').value;
      const formula = document.getElementById('modalColFormula').value;
      
      if (!name) {
        alert('Please enter a property name');
        return;
      }
      
      columns.push({ name, type, options, formula });
      renderColumns();
      modal.hide();
    }
    
    window.editColumn = function(index) {
      const col = columns[index];
      document.getElementById('modalColName').value = col.name;
      document.getElementById('modalColType').value = col.type;
      document.getElementById('modalColOptions').value = col.options || '';
      document.getElementById('modalColFormula').value = col.formula || '';
      updateModalOptions();
      
      columns.splice(index, 1);
      renderColumns();
      modal.show();
    }
    
    window.deleteColumn = function(index) {
      if (confirm('Delete this property?')) {
        columns.splice(index, 1);
        renderColumns();
      }
    }
    
    // Form submission
    document.getElementById('wpForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      if (columns.length === 0) {
        alert('Please add at least one property');
        return;
      }
      
      // Add hidden inputs
      columns.forEach((col, index) => {
        const nameInput = document.createElement('input');
        nameInput.type = 'hidden';
        nameInput.name = `columns[${index}][name]`;
        nameInput.value = col.name;
        this.appendChild(nameInput);
        
        const typeInput = document.createElement('input');
        typeInput.type = 'hidden';
        typeInput.name = `columns[${index}][type]`;
        typeInput.value = col.type;
        this.appendChild(typeInput);
        
        if (col.options) {
          const optionsInput = document.createElement('input');
          optionsInput.type = 'hidden';
          optionsInput.name = `columns[${index}][options]`;
          optionsInput.value = col.options;
          this.appendChild(optionsInput);
        }
        
        if (col.formula) {
          const formulaInput = document.createElement('input');
          formulaInput.type = 'hidden';
          formulaInput.name = `columns[${index}][formula]`;
          formulaInput.value = col.formula;
          this.appendChild(formulaInput);
        }
      });
      
      this.submit();
    });
  </script>
</body>
</html>
