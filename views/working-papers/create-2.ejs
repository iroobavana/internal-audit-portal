<!DOCTYPE html>
<html>
<head>
  <title><%= title %> - Internal Audit Portal</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: #f8fafc;
      color: #1e293b;
    }

    /* Main Content */
    .main-content {
      margin-left: 260px;
      min-height: 100vh;
      padding: 32px;
      max-width: calc(100% - 260px);
    }

    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }

    .page-title {
      font-size: 32px;
      font-weight: 700;
      color: #0f172a;
    }

    /* Notification Toast */
    .notification-container {
      position: fixed;
      top: 32px;
      right: 32px;
      z-index: 9999;
      max-width: 420px;
    }

    .notification {
      background: white;
      border-radius: 16px;
      padding: 20px 24px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      border: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      gap: 16px;
      margin-bottom: 16px;
      animation: slideIn 0.4s ease;
      transition: all 0.3s ease;
    }

    .notification.success {
      border-left: 4px solid #3b82f6;
    }

    .notification.error {
      border-left: 4px solid #ef4444;
    }

    .notification.hiding {
      animation: slideOut 0.4s ease forwards;
    }

    @keyframes slideIn {
      from {
        transform: translateX(450px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @keyframes slideOut {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(450px);
        opacity: 0;
      }
    }

    .notification-icon {
      width: 40px;
      height: 40px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 20px;
    }

    .notification.success .notification-icon {
      background: #dbeafe;
      color: #3b82f6;
    }

    .notification.error .notification-icon {
      background: #fee2e2;
      color: #ef4444;
    }

    .notification-message {
      flex: 1;
      font-size: 15px;
      font-weight: 500;
      color: #1e293b;
      line-height: 1.5;
    }

    .notification-close {
      background: #f8fafc;
      border: none;
      cursor: pointer;
      color: #64748b;
      padding: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 8px;
      transition: all 0.2s;
      width: 32px;
      height: 32px;
    }

    .notification-close:hover {
      background: #e2e8f0;
      color: #1e293b;
    }

    /* Card Styles */
    .card-modern {
      background: white;
      border-radius: 16px;
      padding: 32px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      margin-bottom: 24px;
    }

    .card {
      background: white;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      margin-bottom: 24px;
    }

    .card-header {
      background: white;
      border-bottom: 1px solid #e2e8f0;
      padding: 20px 24px;
      border-radius: 16px 16px 0 0 !important;
    }

    .card-header h5 {
      margin: 0;
      font-weight: 600;
      color: #0f172a;
    }

    .card-body {
      padding: 24px;
    }

    .card-footer {
      background: white;
      border-top: 1px solid #e2e8f0;
      padding: 20px 24px;
    }

    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 10px 24px;
      font-weight: 600;
      border: none;
      transition: all 0.2s;
      cursor: pointer;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .btn-primary {
      background: #3b82f6;
      color: white;
    }

    .btn-primary:hover {
      background: #2563eb;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      color: white;
    }

    .btn-success {
      background: #10b981;
      color: white;
    }

    .btn-success:hover {
      background: #059669;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
      color: white;
    }

    .btn-secondary {
      background: #f1f5f9;
      border: 2px solid #e2e8f0;
      color: #0f172a;
    }

    .btn-secondary:hover {
      background: #e2e8f0;
      border-color: #cbd5e1;
      color: #0f172a;
    }

    .btn-danger {
      background: #ef4444;
      color: white;
    }

    .btn-danger:hover {
      background: #dc2626;
      color: white;
    }

    .btn-sm {
      padding: 6px 14px;
      font-size: 13px;
    }

    /* Form Styles */
    .form-label {
      font-weight: 600;
      color: #0f172a;
      margin-bottom: 8px;
    }

    .form-control, .form-select {
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 10px 14px;
      font-size: 14px;
      transition: all 0.3s ease;
      background: #ffffff;
    }

    .form-control:focus, .form-select:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
      outline: none;
    }

    .form-check-input:checked {
      background-color: #3b82f6;
      border-color: #3b82f6;
    }

    .form-check-input:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
    }

    /* Column Item Styles */
    .column-item {
      background: #f8fafc;
      border: 1px solid #e2e8f0;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 16px;
      position: relative;
      transition: all 0.2s;
    }

    .column-item:hover {
      border-color: #3b82f6;
      box-shadow: 0 2px 8px rgba(59, 130, 246, 0.1);
    }

    .column-item .remove-btn {
      position: absolute;
      top: 12px;
      right: 12px;
      border-radius: 6px;
    }

    /* Preview Table Styles */
    .preview-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      margin-top: 16px;
    }

    .preview-table th {
      background: #3b82f6;
      color: white;
      padding: 12px;
      text-align: left;
      border: none;
      font-weight: 600;
      font-size: 14px;
    }

    .preview-table th:first-child {
      border-radius: 8px 0 0 0;
    }

    .preview-table th:last-child {
      border-radius: 0 8px 0 0;
    }

    .preview-table td {
      padding: 12px;
      border: 1px solid #e2e8f0;
      border-top: none;
      background: white;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 64px 24px;
    }

    .empty-icon {
      font-size: 64px;
      color: #cbd5e1;
      margin-bottom: 16px;
    }

    .empty-text {
      font-size: 16px;
      color: #64748b;
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <%- include('../partials/sidebar') %>
  
  <!-- Notification Container -->
  <div class="notification-container" id="notificationContainer"></div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Page Header -->
    <div class="page-header">
      <div>
        <h1 class="page-title">
          <i class="bi bi-plus-circle"></i> Create Working Paper
        </h1>
        <p class="text-muted mb-0">Design a new working paper template with custom properties</p>
      </div>
      <a href="/working-papers" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Back
      </a>
    </div>
    
    <form action="/working-papers/create" method="POST" id="wpForm">
      <!-- Form Builder Section -->
      <div class="card">
        <div class="card-header">
          <h5><i class="bi bi-gear me-2"></i>Working Paper Configuration</h5>
        </div>
        <div class="card-body">
          <div class="mb-4">
            <label for="name" class="form-label">Working Paper Name</label>
            <input type="text" class="form-control" id="name" name="name" required placeholder="e.g., Reconciliation Working Paper">
          </div>
          
          <div class="mb-4">
            <label class="form-label">Allow Row Insertion</label>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="allow_row_insert" id="allow_yes" value="true" checked>
              <label class="form-check-label" for="allow_yes">
                Yes - Auditors can add rows during field work
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="allow_row_insert" id="allow_no" value="false">
              <label class="form-check-label" for="allow_no">
                No - Fixed structure
              </label>
            </div>
          </div>
          
          <hr>
          
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">Properties</h5>
            <button type="button" class="btn btn-primary btn-sm" id="addColumnBtn">
              <i class="bi bi-plus-circle"></i> Add Property
            </button>
          </div>
          
          <div id="columnsContainer">
            <!-- Columns will be added here dynamically -->
          </div>
        </div>
      </div>

      <!-- Preview Section - Full Width Below -->
      <div class="card">
        <div class="card-header">
          <h5><i class="bi bi-eye me-2"></i>Preview - Table Structure</h5>
        </div>
        <div class="card-body">
          <div id="previewArea">
            <p class="text-muted text-center py-4">Add properties to see preview</p>
          </div>
        </div>
        <div class="card-footer">
          <div class="d-flex justify-content-end gap-2">
            <a href="/working-papers" class="btn btn-secondary">
              <i class="bi bi-x-lg"></i> Cancel
            </a>
            <button type="submit" class="btn btn-success">
              <i class="bi bi-check-circle"></i> Create Working Paper
            </button>
          </div>
        </div>
      </div>
    </form>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function showNotification(message, type = 'success') {
      const container = document.getElementById('notificationContainer');
      
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      const icon = type === 'success' ? 
        '<i class="bi bi-check-circle-fill"></i>' : 
        '<i class="bi bi-exclamation-triangle-fill"></i>';
      
      notification.innerHTML = `
        <div class="notification-icon">${icon}</div>
        <div class="notification-message">${message}</div>
        <button class="notification-close" onclick="dismissNotification(this)">
          <i class="bi bi-x"></i>
        </button>
      `;
      
      container.appendChild(notification);
      
      setTimeout(() => {
        dismissNotification(notification.querySelector('.notification-close'));
      }, 3000);
    }
    
    function dismissNotification(button) {
      const notification = button.closest('.notification');
      notification.classList.add('hiding');
      
      setTimeout(() => {
        notification.remove();
      }, 400);
    }
    
    <% if (typeof success_msg !== 'undefined' && success_msg.length > 0) { %>
      showNotification('<%= success_msg %>', 'success');
    <% } %>
    
    <% if (typeof error_msg !== 'undefined' && error_msg.length > 0) { %>
      showNotification('<%= error_msg %>', 'error');
    <% } %>
    
    <% if (typeof error !== 'undefined' && error.length > 0) { %>
      showNotification('<%= error %>', 'error');
    <% } %>
    
    let columnCount = 0;
    
    const columnTypes = [
      { value: 'text', label: 'Text', icon: 'bi-fonts' },
      { value: 'number', label: 'Number', icon: 'bi-123' },
      { value: 'date', label: 'Date', icon: 'bi-calendar3' },
      { value: 'select', label: 'Select (Single)', icon: 'bi-check-circle' },
      { value: 'multiselect', label: 'Multi-Select', icon: 'bi-check2-square' },
      { value: 'file', label: 'File Upload', icon: 'bi-paperclip' },
      { value: 'url', label: 'URL', icon: 'bi-link-45deg' },
      { value: 'formula', label: 'Formula', icon: 'bi-calculator' }
    ];
    
    document.getElementById('addColumnBtn').addEventListener('click', function() {
      addColumn();
    });
    
    function addColumn(name = '', type = '', options = '', formula = '') {
      columnCount++;
      const columnDiv = document.createElement('div');
      columnDiv.className = 'column-item';
      columnDiv.dataset.columnIndex = columnCount;
      
      columnDiv.innerHTML = `
        <button type="button" class="btn btn-sm btn-danger remove-btn" onclick="removeColumn(${columnCount})">
          <i class="bi bi-x"></i>
        </button>
        
        <div class="row mb-3">
          <div class="col-md-6">
            <label class="form-label">Property Name</label>
            <input type="text" class="form-control column-name" name="columns[${columnCount}][name]" value="${name}" required placeholder="e.g., Item Description">
          </div>
          <div class="col-md-6">
            <label class="form-label">Property Type</label>
            <select class="form-select column-type" name="columns[${columnCount}][type]" required onchange="handleTypeChange(${columnCount})">
              <option value="">- Select Type -</option>
              ${columnTypes.map(t => `<option value="${t.value}" ${t.value === type ? 'selected' : ''}>${t.label}</option>`).join('')}
            </select>
          </div>
        </div>
        
        <div class="options-container" id="options-${columnCount}" style="display: ${type === 'select' || type === 'multiselect' ? 'block' : 'none'};">
          <label class="form-label">Options (one per line)</label>
          <textarea class="form-control" name="columns[${columnCount}][options]" rows="3" placeholder="Option 1\nOption 2\nOption 3">${options}</textarea>
          <small class="text-muted">Enter each option on a new line</small>
        </div>
        
        <div class="formula-container" id="formula-${columnCount}" style="display: ${type === 'formula' ? 'block' : 'none'};">
          <label class="form-label">Formula</label>
          <input type="text" class="form-control" name="columns[${columnCount}][formula]" value="${formula}" placeholder="e.g., col1 + col2 or col1 * col2">
          <small class="text-muted">Use col1, col2, etc. Operators: +, -, *, /</small>
        </div>
      `;
      
      document.getElementById('columnsContainer').appendChild(columnDiv);
      updatePreview();
      
      // Add event listeners for real-time preview
      columnDiv.querySelector('.column-name').addEventListener('input', updatePreview);
      columnDiv.querySelector('.column-type').addEventListener('change', updatePreview);
    }
    
    function removeColumn(index) {
      const column = document.querySelector(`[data-column-index="${index}"]`);
      column.remove();
      updatePreview();
    }
    
    function handleTypeChange(index) {
      const select = document.querySelector(`[data-column-index="${index}"] .column-type`);
      const type = select.value;
      
      const optionsDiv = document.getElementById(`options-${index}`);
      const formulaDiv = document.getElementById(`formula-${index}`);
      
      optionsDiv.style.display = (type === 'select' || type === 'multiselect') ? 'block' : 'none';
      formulaDiv.style.display = (type === 'formula') ? 'block' : 'none';
      
      const optionsTextarea = optionsDiv.querySelector('textarea');
      const formulaInput = formulaDiv.querySelector('input');
      
      if (optionsTextarea) {
        optionsTextarea.required = (type === 'select' || type === 'multiselect');
      }
      if (formulaInput) {
        formulaInput.required = (type === 'formula');
      }
      
      updatePreview();
    }
    
    function updatePreview() {
      const columns = document.querySelectorAll('.column-item');
      const previewArea = document.getElementById('previewArea');
      
      if (columns.length === 0) {
        previewArea.innerHTML = '<p class="text-muted text-center py-4">Add properties to see preview</p>';
        return;
      }
      
      let tableHTML = '<div style="overflow-x: auto;"><table class="preview-table"><thead><tr>';
      
      columns.forEach((column, index) => {
        const name = column.querySelector('.column-name').value || `Column ${index + 1}`;
        const type = column.querySelector('.column-type').value;
        const typeIcon = columnTypes.find(t => t.value === type)?.icon || 'bi-square';
        
        tableHTML += `<th><i class="${typeIcon}"></i> ${name}</th>`;
      });
      
      tableHTML += '</tr></thead><tbody><tr>';
      
      columns.forEach((column) => {
        const type = column.querySelector('.column-type').value;
        let cellContent = '-';
        
        switch(type) {
          case 'text': cellContent = '<input type="text" class="form-control form-control-sm" disabled>'; break;
          case 'number': cellContent = '<input type="number" class="form-control form-control-sm" disabled>'; break;
          case 'date': cellContent = '<input type="date" class="form-control form-control-sm" disabled>'; break;
          case 'select': cellContent = '<select class="form-select form-select-sm" disabled><option>Select...</option></select>'; break;
          case 'multiselect': cellContent = '<select class="form-select form-select-sm" multiple disabled><option>Select...</option></select>'; break;
          case 'file': cellContent = '<input type="file" class="form-control form-control-sm" disabled>'; break;
          case 'url': cellContent = '<input type="url" class="form-control form-control-sm" placeholder="https://" disabled>'; break;
          case 'formula': cellContent = '<span class="badge bg-secondary">Auto-calculated</span>'; break;
        }
        
        tableHTML += `<td>${cellContent}</td>`;
      });
      
      tableHTML += '</tr></tbody></table></div>';
      
      previewArea.innerHTML = tableHTML;
    }
    
    // Form submission handler
    document.getElementById('wpForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const columns = document.querySelectorAll('.column-item');
      if (columns.length === 0) {
        showNotification('Please add at least one property', 'error');
        return;
      }
      
      // Validation: Check if all columns have names and types
      let isValid = true;
      columns.forEach((column) => {
        const name = column.querySelector('.column-name').value.trim();
        const type = column.querySelector('.column-type').value;
        
        if (!name || !type) {
          isValid = false;
        }
      });
      
      if (!isValid) {
        showNotification('Please fill in all property names and types', 'error');
        return;
      }
      
      // Submit the form - will redirect to /working-papers list after creation
      this.submit();
    });
    
    // Add first column automatically
    addColumn();
  </script>
</body>
</html>
