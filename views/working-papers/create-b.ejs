<!DOCTYPE html>
<html>
<head>
  <title><%= title %> - Internal Audit Portal</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    :root {
      --notion-gray: #f7f6f3;
      --notion-border: #e9e9e7;
      --notion-hover: #f1f1ef;
    }
    
    .builder-container {
      max-width: 900px;
      margin: 0 auto;
    }
    
    .wp-header {
      background: white;
      border-radius: 12px;
      padding: 32px;
      margin-bottom: 24px;
      border: 1px solid var(--notion-border);
    }
    
    .wp-title-input {
      border: none;
      font-size: 32px;
      font-weight: 600;
      width: 100%;
      padding: 8px 0;
      margin-bottom: 16px;
    }
    
    .wp-title-input:focus {
      outline: none;
      border-bottom: 2px solid var(--primary);
    }
    
    .columns-section {
      background: white;
      border-radius: 12px;
      padding: 24px;
      border: 1px solid var(--notion-border);
    }
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .add-column-btn {
      background: var(--notion-gray);
      border: 1px solid var(--notion-border);
      border-radius: 8px;
      padding: 10px 16px;
      cursor: pointer;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      gap: 8px;
      color: #37352f;
      font-weight: 500;
    }
    
    .add-column-btn:hover {
      background: var(--notion-hover);
    }
    
    .column-list {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    
    .column-row {
      background: var(--notion-gray);
      border-radius: 8px;
      padding: 12px 16px;
      display: flex;
      align-items: center;
      gap: 12px;
      transition: all 0.2s;
      cursor: pointer;
    }
    
    .column-row:hover {
      background: var(--notion-hover);
      transform: translateX(4px);
    }
    
    .column-row.editing {
      background: white;
      border: 2px solid var(--primary);
      padding: 20px;
    }
    
    .drag-handle {
      color: #999;
      cursor: grab;
      font-size: 18px;
    }
    
    .column-icon {
      width: 32px;
      height: 32px;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      flex-shrink: 0;
    }
    
    .column-name {
      flex: 1;
      font-weight: 500;
      color: #37352f;
    }
    
    .column-type-badge {
      background: white;
      border: 1px solid var(--notion-border);
      padding: 4px 12px;
      border-radius: 6px;
      font-size: 13px;
      color: #787774;
    }
    
    .column-actions {
      display: flex;
      gap: 8px;
    }
    
    .column-edit-form {
      display: none;
    }
    
    .column-row.editing .column-edit-form {
      display: block;
      width: 100%;
    }
    
    .column-row.editing .column-summary {
      display: none;
    }
    
    .type-selector {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 8px;
      margin: 16px 0;
    }
    
    .type-option {
      background: var(--notion-gray);
      border: 2px solid transparent;
      border-radius: 8px;
      padding: 12px;
      cursor: pointer;
      transition: all 0.2s;
      text-align: center;
    }
    
    .type-option:hover {
      background: var(--notion-hover);
      border-color: var(--primary);
    }
    
    .type-option.selected {
      background: #e3f2fd;
      border-color: var(--primary);
    }
    
    .type-option i {
      font-size: 24px;
      display: block;
      margin-bottom: 4px;
    }
    
    .type-option span {
      font-size: 12px;
      display: block;
    }
    
    .preview-section {
      background: white;
      border-radius: 12px;
      padding: 24px;
      margin-top: 24px;
      border: 1px solid var(--notion-border);
    }
    
    .preview-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      margin-top: 16px;
    }
    
    .preview-table th {
      background: var(--notion-gray);
      padding: 12px;
      text-align: left;
      font-weight: 600;
      color: #37352f;
      border: 1px solid var(--notion-border);
      font-size: 14px;
    }
    
    .preview-table th:first-child {
      border-radius: 8px 0 0 0;
    }
    
    .preview-table th:last-child {
      border-radius: 0 8px 0 0;
    }
    
    .preview-table td {
      padding: 12px;
      border: 1px solid var(--notion-border);
      border-top: none;
    }
    
    .empty-state {
      text-align: center;
      padding: 48px;
      color: #999;
    }
    
    .empty-state i {
      font-size: 48px;
      margin-bottom: 16px;
      display: block;
    }
    
    .form-control:focus, .form-select:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(26, 115, 232, 0.1);
    }
    
    .sticky-footer {
      position: sticky;
      bottom: 0;
      background: white;
      padding: 20px;
      border-top: 1px solid var(--notion-border);
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
      border-radius: 12px;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar') %>
  <%- include('../partials/messages') %>
  
  <div class="container-fluid py-4">
    <div class="builder-container">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="bi bi-plus-circle me-2"></i>Create Working Paper</h2>
        <a href="/working-papers" class="btn btn-secondary">
          <i class="bi bi-x"></i> Cancel
        </a>
      </div>
      
      <form id="wpForm" action="/working-papers/create" method="POST">
        <!-- Header Section -->
        <div class="wp-header">
          <input type="text" 
                 class="wp-title-input" 
                 name="name" 
                 placeholder="Untitled Working Paper" 
                 required>
          
          <div class="d-flex align-items-center gap-3">
            <label class="mb-0" style="color: #787774; font-size: 14px;">
              <input type="checkbox" name="allow_row_insert" value="true" checked>
              Allow adding rows during audits
            </label>
          </div>
        </div>
        
        <!-- Columns Section -->
        <div class="columns-section">
          <div class="section-header">
            <h5 class="mb-0">Properties</h5>
            <button type="button" class="add-column-btn" onclick="addNewColumn()">
              <i class="bi bi-plus-lg"></i>
              <span>Add Property</span>
            </button>
          </div>
          
          <div class="column-list" id="columnList">
            <div class="empty-state" id="emptyState">
              <i class="bi bi-table"></i>
              <p>No properties yet. Click "Add Property" to start building your working paper.</p>
            </div>
          </div>
        </div>
        
        <!-- Preview Section -->
        <div class="preview-section">
          <h5>Preview</h5>
          <div id="previewArea">
            <p class="text-muted text-center py-4">Add properties to see how your working paper will look</p>
          </div>
        </div>
        
        <!-- Footer -->
        <div class="sticky-footer">
          <a href="/working-papers" class="btn btn-secondary">Cancel</a>
          <button type="submit" class="btn btn-primary">
            <i class="bi bi-check2"></i> Create Working Paper
          </button>
        </div>
      </form>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let columnCount = 0;
    const columns = [];
    
    const columnTypes = [
      { value: 'text', label: 'Text', icon: 'bi-fonts', color: '#2eaadc' },
      { value: 'number', label: 'Number', icon: 'bi-123', color: '#ff6b6b' },
      { value: 'date', label: 'Date', icon: 'bi-calendar3', color: '#51cf66' },
      { value: 'select', label: 'Select', icon: 'bi-check-circle', color: '#845ef7' },
      { value: 'multiselect', label: 'Multi', icon: 'bi-check2-square', color: '#ae3ec9' },
      { value: 'file', label: 'File', icon: 'bi-paperclip', color: '#fab005' },
      { value: 'url', label: 'URL', icon: 'bi-link-45deg', color: '#20c997' },
      { value: 'formula', label: 'Formula', icon: 'bi-calculator', color: '#868e96' }
    ];
    
    window.addNewColumn = function() {
      columnCount++;
      const id = `col-${columnCount}`;
      
      const column = {
        id: id,
        name: '',
        type: 'text',
        options: '',
        formula: '',
        editing: true
      };
      
      columns.push(column);
      renderColumns();
      
      setTimeout(() => {
        document.querySelector(`#${id} input[data-field="name"]`)?.focus();
      }, 100);
    }
    
    function renderColumns() {
      const container = document.getElementById('columnList');
      const emptyState = document.getElementById('emptyState');
      
      if (columns.length === 0) {
        emptyState.style.display = 'block';
        return;
      }
      
      emptyState.style.display = 'none';
      container.innerHTML = '';
      
      columns.forEach((col, index) => {
        const typeInfo = columnTypes.find(t => t.value === col.type) || columnTypes[0];
        
        const row = document.createElement('div');
        row.className = `column-row ${col.editing ? 'editing' : ''}`;
        row.id = col.id;
        
        row.innerHTML = `
          <!-- Summary View -->
          <div class="column-summary d-flex align-items-center gap-3 w-100">
            <i class="bi bi-grip-vertical drag-handle"></i>
            <div class="column-icon" style="background: ${typeInfo.color}20; color: ${typeInfo.color};">
              <i class="${typeInfo.icon}"></i>
            </div>
            <span class="column-name">${col.name || 'Unnamed Property'}</span>
            <span class="column-type-badge">${typeInfo.label}</span>
            <div class="column-actions ms-auto">
              <button type="button" class="btn btn-sm btn-light" onclick="editColumn('${col.id}')">
                <i class="bi bi-pencil"></i>
              </button>
              <button type="button" class="btn btn-sm btn-light text-danger" onclick="deleteColumn('${col.id}')">
                <i class="bi bi-trash"></i>
              </button>
            </div>
          </div>
          
          <!-- Edit Form -->
          <div class="column-edit-form">
            <div class="mb-3">
              <label class="form-label fw-bold">Property Name</label>
              <input type="text" 
                     class="form-control" 
                     data-field="name"
                     value="${col.name}"
                     placeholder="e.g., Item Description"
                     onchange="updateColumn('${col.id}', 'name', this.value)"
                     required>
            </div>
            
            <div class="mb-3">
              <label class="form-label fw-bold">Property Type</label>
              <div class="type-selector">
                ${columnTypes.map(type => `
                  <div class="type-option ${col.type === type.value ? 'selected' : ''}" 
                       onclick="selectType('${col.id}', '${type.value}')">
                    <i class="${type.icon}" style="color: ${type.color};"></i>
                    <span>${type.label}</span>
                  </div>
                `).join('')}
              </div>
            </div>
            
            ${col.type === 'select' || col.type === 'multiselect' ? `
              <div class="mb-3">
                <label class="form-label fw-bold">Options (one per line)</label>
                <textarea class="form-control" 
                          data-field="options"
                          rows="3" 
                          placeholder="Option 1\nOption 2\nOption 3"
                          onchange="updateColumn('${col.id}', 'options', this.value)">${col.options}</textarea>
              </div>
            ` : ''}
            
            ${col.type === 'formula' ? `
              <div class="mb-3">
                <label class="form-label fw-bold">Formula</label>
                <input type="text" 
                       class="form-control" 
                       data-field="formula"
                       value="${col.formula}"
                       placeholder="e.g., col1 + col2"
                       onchange="updateColumn('${col.id}', 'formula', this.value)">
                <small class="text-muted">Use col1, col2, etc. Operators: +, -, *, /</small>
              </div>
            ` : ''}
            
            <div class="text-end mt-3">
              <button type="button" class="btn btn-primary btn-sm" onclick="saveColumn('${col.id}')">
                <i class="bi bi-check2"></i> Done
              </button>
            </div>
          </div>
        `;
        
        container.appendChild(row);
      });
      
      updatePreview();
    }
    
    window.editColumn = function(id) {
      const col = columns.find(c => c.id === id);
      if (col) {
        col.editing = true;
        renderColumns();
      }
    }
    
    window.saveColumn = function(id) {
      const col = columns.find(c => c.id === id);
      if (col && col.name) {
        col.editing = false;
        renderColumns();
      } else {
        alert('Please enter a property name');
      }
    }
    
    window.deleteColumn = function(id) {
      if (confirm('Delete this property?')) {
        const index = columns.findIndex(c => c.id === id);
        if (index > -1) {
          columns.splice(index, 1);
          renderColumns();
        }
      }
    }
    
    window.updateColumn = function(id, field, value) {
      const col = columns.find(c => c.id === id);
      if (col) {
        col[field] = value;
        if (field === 'name') {
          updatePreview();
        }
      }
    }
    
    window.selectType = function(id, type) {
      const col = columns.find(c => c.id === id);
      if (col) {
        col.type = type;
        renderColumns();
      }
    }
    
    function updatePreview() {
      const previewArea = document.getElementById('previewArea');
      
      if (columns.length === 0) {
        previewArea.innerHTML = '<p class="text-muted text-center py-4">Add properties to see how your working paper will look</p>';
        return;
      }
      
      let html = '<table class="preview-table"><thead><tr>';
      
      columns.forEach(col => {
        const typeInfo = columnTypes.find(t => t.value === col.type) || columnTypes[0];
        html += `
          <th>
            <i class="${typeInfo.icon}" style="color: ${typeInfo.color};"></i>
            ${col.name || 'Unnamed'}
          </th>
        `;
      });
      
      html += '</tr></thead><tbody><tr>';
      
      columns.forEach(col => {
        html += '<td style="color: #999;">Empty</td>';
      });
      
      html += '</tr></tbody></table>';
      
      previewArea.innerHTML = html;
    }
    
    // Form submission handler
    document.getElementById('wpForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      if (columns.length === 0) {
        alert('Please add at least one property');
        return;
      }
      
      // Create hidden inputs for each column
      const form = this;
      
      // Remove old hidden inputs
      form.querySelectorAll('input[name^="columns"]').forEach(input => input.remove());
      
      // Add new hidden inputs
      columns.forEach((col, index) => {
        const nameInput = document.createElement('input');
        nameInput.type = 'hidden';
        nameInput.name = `columns[${index}][name]`;
        nameInput.value = col.name;
        form.appendChild(nameInput);
        
        const typeInput = document.createElement('input');
        typeInput.type = 'hidden';
        typeInput.name = `columns[${index}][type]`;
        typeInput.value = col.type;
        form.appendChild(typeInput);
        
        if (col.options) {
          const optionsInput = document.createElement('input');
          optionsInput.type = 'hidden';
          optionsInput.name = `columns[${index}][options]`;
          optionsInput.value = col.options;
          form.appendChild(optionsInput);
        }
        
        if (col.formula) {
          const formulaInput = document.createElement('input');
          formulaInput.type = 'hidden';
          formulaInput.name = `columns[${index}][formula]`;
          formulaInput.value = col.formula;
          form.appendChild(formulaInput);
        }
      });
      
      // Submit the form
      form.submit();
    });
    
    // Add first column automatically
    addNewColumn();
  </script>
</body>
</html>
