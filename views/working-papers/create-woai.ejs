<!DOCTYPE html>
<html>
<head>
  <title><%= title %> - Internal Audit Portal</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: #f8fafc;
      color: #1e293b;
    }

    /* Main Content */
    .main-content {
      margin-left: 260px;
      min-height: 100vh;
      padding: 32px;
      max-width: calc(100% - 260px);
    }

    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }

    .page-title {
      font-size: 32px;
      font-weight: 700;
      color: #0f172a;
    }

    /* Notification Toast */
    .notification-container {
      position: fixed;
      top: 32px;
      right: 32px;
      z-index: 9999;
      max-width: 420px;
    }

    .notification {
      background: white;
      border-radius: 16px;
      padding: 20px 24px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      border: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      gap: 16px;
      margin-bottom: 16px;
      animation: slideIn 0.4s ease;
      transition: all 0.3s ease;
    }

    .notification.success {
      border-left: 4px solid #3b82f6;
    }

    .notification.error {
      border-left: 4px solid #ef4444;
    }

    .notification.hiding {
      animation: slideOut 0.4s ease forwards;
    }

    @keyframes slideIn {
      from {
        transform: translateX(450px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @keyframes slideOut {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(450px);
        opacity: 0;
      }
    }

    .notification-icon {
      width: 40px;
      height: 40px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 20px;
    }

    .notification.success .notification-icon {
      background: #dbeafe;
      color: #3b82f6;
    }

    .notification.error .notification-icon {
      background: #fee2e2;
      color: #ef4444;
    }

    .notification-message {
      flex: 1;
      font-size: 15px;
      font-weight: 500;
      color: #1e293b;
      line-height: 1.5;
    }

    .notification-close {
      background: #f8fafc;
      border: none;
      cursor: pointer;
      color: #64748b;
      padding: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 8px;
      transition: all 0.2s;
      width: 32px;
      height: 32px;
    }

    .notification-close:hover {
      background: #e2e8f0;
      color: #1e293b;
    }

    /* Card Styles */
    .card {
      background: white;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      margin-bottom: 24px;
    }

    .card-header {
      background: white;
      border-bottom: 1px solid #e2e8f0;
      padding: 20px 24px;
      border-radius: 16px 16px 0 0 !important;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .card-header h5 {
      margin: 0;
      font-weight: 600;
      color: #0f172a;
    }

    .card-body {
      padding: 24px;
    }

    .card-footer {
      background: white;
      border-top: 1px solid #e2e8f0;
      padding: 20px 24px;
    }

    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 10px 24px;
      font-weight: 600;
      border: none;
      transition: all 0.2s;
      cursor: pointer;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .btn-primary {
      background: #3b82f6;
      color: white;
    }

    .btn-primary:hover {
      background: #2563eb;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      color: white;
    }

    .btn-success {
      background: #10b981;
      color: white;
    }

    .btn-success:hover {
      background: #059669;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
      color: white;
    }

    .btn-secondary {
      background: #f1f5f9;
      border: 2px solid #e2e8f0;
      color: #0f172a;
    }

    .btn-secondary:hover {
      background: #e2e8f0;
      border-color: #cbd5e1;
      color: #0f172a;
    }

    .btn-danger {
      background: #ef4444;
      color: white;
    }

    .btn-danger:hover {
      background: #dc2626;
      color: white;
    }

    .btn-sm {
      padding: 6px 14px;
      font-size: 13px;
    }

    /* Form Styles */
    .form-label {
      font-weight: 600;
      color: #0f172a;
      margin-bottom: 8px;
    }

    .form-control, .form-select {
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 10px 14px;
      font-size: 14px;
      transition: all 0.3s ease;
      background: #ffffff;
    }

    .form-control:focus, .form-select:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
      outline: none;
    }

    .form-check-input:checked {
      background-color: #3b82f6;
      border-color: #3b82f6;
    }

    .form-check-input:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
    }

    /* Editable Table Styles */
    .editable-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
    }

    .editable-table thead tr:first-child th {
      background: #3b82f6;
      color: white;
      padding: 0;
      border: none;
      position: relative;
    }

    .editable-table .column-header {
      position: relative;
      min-height: 50px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 12px;
      gap: 8px;
    }

    .editable-table .column-name-input {
      background: transparent;
      border: none;
      color: white;
      font-weight: 600;
      font-size: 14px;
      padding: 4px 8px;
      border-radius: 4px;
      flex: 1;
      transition: all 0.2s;
    }

    .editable-table .column-name-input:focus {
      background: rgba(255, 255, 255, 0.15);
      outline: none;
    }

    .editable-table .column-name-input::placeholder {
      color: rgba(255, 255, 255, 0.7);
    }

    .editable-table .remove-column-btn {
      background: rgba(239, 68, 68, 0.9);
      border: none;
      color: white;
      width: 28px;
      height: 28px;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s;
      flex-shrink: 0;
    }

    .editable-table .remove-column-btn:hover {
      background: #dc2626;
      transform: scale(1.05);
    }

    .editable-table thead tr:nth-child(2) td {
      background: #f8fafc;
      padding: 12px;
      border-bottom: 2px solid #e2e8f0;
    }

    .editable-table tbody td {
      padding: 12px;
      border: 1px solid #e2e8f0;
      border-top: none;
      background: white;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 64px 24px;
    }

    .empty-icon {
      font-size: 64px;
      color: #cbd5e1;
      margin-bottom: 16px;
    }

    .empty-text {
      font-size: 16px;
      color: #64748b;
    }

    /* Options and Formula Container */
    .config-container {
      margin-top: 8px;
    }

    .config-container textarea,
    .config-container input {
      font-size: 13px;
    }

    .config-container small {
      display: block;
      margin-top: 4px;
      color: #64748b;
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <%- include('../partials/sidebar') %>
  
  <!-- Notification Container -->
  <div class="notification-container" id="notificationContainer"></div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Page Header -->
    <div class="page-header">
      <div>
        <h1 class="page-title">
          <i class="bi bi-plus-circle"></i> Create Working Paper
        </h1>
        <p class="text-muted mb-0">Design a new working paper template with custom properties</p>
      </div>
      <a href="/working-papers" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Back
      </a>
    </div>
    
    <form action="/working-papers/create" method="POST" id="wpForm">
      <!-- Basic Configuration -->
      <div class="card">
        <div class="card-body">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="name" class="form-label">Working Paper Name</label>
              <input type="text" class="form-control" id="name" name="name" required placeholder="e.g., Reconciliation Working Paper">
            </div>
            
            <div class="col-md-6 mb-3">
              <label class="form-label">Allow Row Insertion</label>
              <div class="d-flex gap-3">
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="allow_row_insert" id="allow_yes" value="true" checked>
                  <label class="form-check-label" for="allow_yes">
                    Yes
                  </label>
                </div>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="allow_row_insert" id="allow_no" value="false">
                  <label class="form-check-label" for="allow_no">
                    No
                  </label>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Preview/Builder Section -->
      <div class="card">
        <div class="card-header">
          <h5><i class="bi bi-table me-2"></i>Table Structure</h5>
          <button type="button" class="btn btn-primary btn-sm" id="addColumnBtn">
            <i class="bi bi-plus-circle"></i> Add Property
          </button>
        </div>
        <div class="card-body">
          <div id="tableArea">
            <div class="empty-state">
              <div class="empty-icon">
                <i class="bi bi-table"></i>
              </div>
              <div class="empty-text">Click "Add Property" to start building your table</div>
            </div>
          </div>
        </div>
        <div class="card-footer">
          <div class="d-flex justify-content-end gap-2">
            <a href="/working-papers" class="btn btn-secondary">
              <i class="bi bi-x-lg"></i> Cancel
            </a>
            <button type="submit" class="btn btn-success">
              <i class="bi bi-check-circle"></i> Create Working Paper
            </button>
          </div>
        </div>
      </div>
    </form>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function showNotification(message, type = 'success') {
      const container = document.getElementById('notificationContainer');
      
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      const icon = type === 'success' ? 
        '<i class="bi bi-check-circle-fill"></i>' : 
        '<i class="bi bi-exclamation-triangle-fill"></i>';
      
      notification.innerHTML = `
        <div class="notification-icon">${icon}</div>
        <div class="notification-message">${message}</div>
        <button class="notification-close" onclick="dismissNotification(this)">
          <i class="bi bi-x"></i>
        </button>
      `;
      
      container.appendChild(notification);
      
      setTimeout(() => {
        dismissNotification(notification.querySelector('.notification-close'));
      }, 3000);
    }
    
    function dismissNotification(button) {
      const notification = button.closest('.notification');
      notification.classList.add('hiding');
      
      setTimeout(() => {
        notification.remove();
      }, 400);
    }
    
    <% if (typeof success_msg !== 'undefined' && success_msg.length > 0) { %>
      showNotification('<%= success_msg %>', 'success');
    <% } %>
    
    <% if (typeof error_msg !== 'undefined' && error_msg.length > 0) { %>
      showNotification('<%= error_msg %>', 'error');
    <% } %>
    
    <% if (typeof error !== 'undefined' && error.length > 0) { %>
      showNotification('<%= error %>', 'error');
    <% } %>
    
    let columnCount = 0;
    
    const columnTypes = [
      { value: 'text', label: 'Text', icon: 'bi-fonts' },
      { value: 'number', label: 'Number', icon: 'bi-123' },
      { value: 'date', label: 'Date', icon: 'bi-calendar3' },
      { value: 'select', label: 'Select (Single)', icon: 'bi-check-circle' },
      { value: 'multiselect', label: 'Multi-Select', icon: 'bi-check2-square' },
      { value: 'file', label: 'File Upload', icon: 'bi-paperclip' },
      { value: 'url', label: 'URL', icon: 'bi-link-45deg' },
      { value: 'formula', label: 'Formula', icon: 'bi-calculator' }
    ];
    
    document.getElementById('addColumnBtn').addEventListener('click', function() {
      addColumn();
    });
    
    function addColumn() {
      columnCount++;
      
      // Check if table exists, if not create it
      let table = document.querySelector('.editable-table');
      if (!table) {
        document.getElementById('tableArea').innerHTML = `
          <div style="overflow-x: auto;">
            <table class="editable-table">
              <thead>
                <tr id="headerRow"></tr>
                <tr id="configRow"></tr>
              </thead>
              <tbody>
                <tr id="previewRow"></tr>
              </tbody>
            </table>
          </div>
        `;
        table = document.querySelector('.editable-table');
      }
      
      // Add header cell
      const headerRow = document.getElementById('headerRow');
      const headerCell = document.createElement('th');
      headerCell.dataset.columnIndex = columnCount;
      headerCell.innerHTML = `
        <div class="column-header">
          <input type="text" 
                 class="column-name-input" 
                 name="columns[${columnCount}][name]" 
                 placeholder="Column Name" 
                 required>
          <button type="button" class="remove-column-btn" onclick="removeColumn(${columnCount})">
            <i class="bi bi-x"></i>
          </button>
        </div>
      `;
      headerRow.appendChild(headerCell);
      
      // Add config cell
      const configRow = document.getElementById('configRow');
      const configCell = document.createElement('td');
      configCell.dataset.columnIndex = columnCount;
      configCell.innerHTML = `
        <div>
          <select class="form-select form-select-sm column-type" 
                  name="columns[${columnCount}][type]" 
                  required 
                  onchange="handleTypeChange(${columnCount})">
            <option value="">Select Type</option>
            ${columnTypes.map(t => `<option value="${t.value}">${t.label}</option>`).join('')}
          </select>
          
          <div class="config-container options-container" id="options-${columnCount}" style="display: none;">
            <textarea class="form-control form-control-sm mt-2" 
                      name="columns[${columnCount}][options]" 
                      rows="2" 
                      placeholder="Option 1&#10;Option 2&#10;Option 3"></textarea>
            <small>One option per line</small>
          </div>
          
          <div class="config-container formula-container" id="formula-${columnCount}" style="display: none;">
            <input type="text" 
                   class="form-control form-control-sm mt-2" 
                   name="columns[${columnCount}][formula]" 
                   placeholder="e.g., col1 + col2">
            <small>Use col1, col2, etc. Operators: +, -, *, /</small>
          </div>
        </div>
      `;
      configRow.appendChild(configCell);
      
      // Add preview cell
      const previewRow = document.getElementById('previewRow');
      const previewCell = document.createElement('td');
      previewCell.dataset.columnIndex = columnCount;
      previewCell.innerHTML = `<span class="text-muted">Select type above</span>`;
      previewRow.appendChild(previewCell);
    }
    
    function removeColumn(index) {
      const headerCell = document.querySelector(`#headerRow th[data-column-index="${index}"]`);
      const configCell = document.querySelector(`#configRow td[data-column-index="${index}"]`);
      const previewCell = document.querySelector(`#previewRow td[data-column-index="${index}"]`);
      
      if (headerCell) headerCell.remove();
      if (configCell) configCell.remove();
      if (previewCell) previewCell.remove();
      
      // Check if table is empty
      const headerRow = document.getElementById('headerRow');
      if (headerRow && headerRow.children.length === 0) {
        document.getElementById('tableArea').innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">
              <i class="bi bi-table"></i>
            </div>
            <div class="empty-text">Click "Add Property" to start building your table</div>
          </div>
        `;
      }
    }
    
    function handleTypeChange(index) {
      const select = document.querySelector(`#configRow td[data-column-index="${index}"] .column-type`);
      const type = select.value;
      
      const optionsDiv = document.getElementById(`options-${index}`);
      const formulaDiv = document.getElementById(`formula-${index}`);
      
      optionsDiv.style.display = (type === 'select' || type === 'multiselect') ? 'block' : 'none';
      formulaDiv.style.display = (type === 'formula') ? 'block' : 'none';
      
      const optionsTextarea = optionsDiv.querySelector('textarea');
      const formulaInput = formulaDiv.querySelector('input');
      
      if (optionsTextarea) {
        optionsTextarea.required = (type === 'select' || type === 'multiselect');
      }
      if (formulaInput) {
        formulaInput.required = (type === 'formula');
      }
      
      // Update preview cell
      updatePreviewCell(index, type);
    }
    
    function updatePreviewCell(index, type) {
      const previewCell = document.querySelector(`#previewRow td[data-column-index="${index}"]`);
      if (!previewCell) return;
      
      let cellContent = '-';
      
      switch(type) {
        case 'text': cellContent = '<input type="text" class="form-control form-control-sm" disabled>'; break;
        case 'number': cellContent = '<input type="number" class="form-control form-control-sm" disabled>'; break;
        case 'date': cellContent = '<input type="date" class="form-control form-control-sm" disabled>'; break;
        case 'select': cellContent = '<select class="form-select form-select-sm" disabled><option>Select...</option></select>'; break;
        case 'multiselect': cellContent = '<select class="form-select form-select-sm" multiple disabled><option>Select...</option></select>'; break;
        case 'file': cellContent = '<input type="file" class="form-control form-control-sm" disabled>'; break;
        case 'url': cellContent = '<input type="url" class="form-control form-control-sm" placeholder="https://" disabled>'; break;
        case 'formula': cellContent = '<span class="badge bg-secondary">Auto-calculated</span>'; break;
        default: cellContent = '<span class="text-muted">Select type</span>';
      }
      
      previewCell.innerHTML = cellContent;
    }
    
    // Form submission handler
    document.getElementById('wpForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const headerRow = document.getElementById('headerRow');
      if (!headerRow || headerRow.children.length === 0) {
        showNotification('Please add at least one property', 'error');
        return;
      }
      
      // Validation: Check if all columns have names and types
      let isValid = true;
      const configCells = document.querySelectorAll('#configRow td');
      
      configCells.forEach((cell) => {
        const index = cell.dataset.columnIndex;
        const nameInput = document.querySelector(`#headerRow th[data-column-index="${index}"] .column-name-input`);
        const typeSelect = cell.querySelector('.column-type');
        
        if (!nameInput || !nameInput.value.trim() || !typeSelect || !typeSelect.value) {
          isValid = false;
        }
      });
      
      if (!isValid) {
        showNotification('Please fill in all column names and types', 'error');
        return;
      }
      
      // Submit the form
      this.submit();
    });
  </script>
</body>
</html>
