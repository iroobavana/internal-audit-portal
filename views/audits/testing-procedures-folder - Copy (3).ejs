<!DOCTYPE html>
<html>
<head>
  <title>Testing Procedures - <%= folderName %> | Internal Audit Portal</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: #f8fafc;
      color: #1e293b;
    }
    
    /* Main Content */
    .main-content {
      margin-left: 260px;
      min-height: 100vh;
      padding: 32px;
      max-width: calc(100% - 260px);
    }
    
    /* Notification Toast */
    .notification-container {
      position: fixed;
      top: 32px;
      right: 32px;
      z-index: 9999;
      max-width: 420px;
    }
    
    .notification {
      background: white;
      border-radius: 16px;
      padding: 20px 24px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      border: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      gap: 16px;
      margin-bottom: 16px;
      animation: slideIn 0.4s ease;
      transition: all 0.3s ease;
    }
    
    .notification.success {
      border-left: 4px solid #3b82f6;
    }
    
    .notification.error {
      border-left: 4px solid #ef4444;
    }
    
    .notification.hiding {
      animation: slideOut 0.4s ease forwards;
    }
    
    @keyframes slideIn {
      from {
        transform: translateX(450px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
    
    @keyframes slideOut {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(450px);
        opacity: 0;
      }
    }
    
    .notification-icon {
      width: 40px;
      height: 40px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 20px;
    }
    
    .notification.success .notification-icon {
      background: #dbeafe;
      color: #3b82f6;
    }
    
    .notification.error .notification-icon {
      background: #fee2e2;
      color: #ef4444;
    }
    
    .notification-message {
      flex: 1;
      font-size: 15px;
      font-weight: 500;
      color: #1e293b;
      line-height: 1.5;
    }
    
    .notification-close {
      background: #f8fafc;
      border: none;
      cursor: pointer;
      color: #64748b;
      padding: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 8px;
      transition: all 0.2s;
      width: 32px;
      height: 32px;
    }
    
    .notification-close:hover {
      background: #e2e8f0;
      color: #1e293b;
    }

    /* Page Header */
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
    }
    
    .page-title {
      font-size: 32px;
      font-weight: 700;
      color: #0f172a;
    }

    /* Breadcrumb */
    .breadcrumb-custom {
      background: white;
      border-radius: 12px;
      padding: 16px 24px;
      margin-bottom: 24px;
      border: 1px solid #e2e8f0;
    }
    
    .breadcrumb-custom a {
      color: #3b82f6;
      text-decoration: none;
      font-weight: 500;
    }
    
    .breadcrumb-custom a:hover {
      text-decoration: underline;
    }
    
    /* Card Styles */
    .card-modern {
      background: white;
      border-radius: 16px;
      padding: 32px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      margin-bottom: 24px;
    }
    
    .card-title {
      font-size: 20px;
      font-weight: 700;
      color: #0f172a;
      margin-bottom: 24px;
      padding-bottom: 16px;
      border-bottom: 2px solid #e2e8f0;
    }

    /* Folder Header */
    .folder-header-card {
      background: white;
      border-radius: 16px;
      padding: 32px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      margin-bottom: 24px;
    }
    
    .folder-title {
      font-size: 28px;
      font-weight: 700;
      color: #0f172a;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .folder-icon-large {
      font-size: 32px;
      color: #fbbf24;
    }
    
    .folder-details {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 16px;
      margin-top: 16px;
    }
    
    .detail-item {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }
    
    .detail-label {
      font-weight: 600;
      color: #64748b;
      font-size: 13px;
    }
    
    .detail-value {
      color: #0f172a;
      font-weight: 500;
    }

    /* Form Styles */
    .form-label {
      font-weight: 600;
      color: #0f172a;
      margin-bottom: 8px;
      font-size: 14px;
    }
    
    .form-control, .form-select {
      border: 1px solid #e2e8f0;
      border-radius: 10px;
      padding: 12px 16px;
      font-size: 14px;
      transition: all 0.3s ease;
      background: #ffffff;
      box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    }
    
    .form-control:hover, .form-select:hover {
      border-color: #cbd5e1;
      box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    }
    
    .form-control:focus, .form-select:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
      outline: none;
      background: #ffffff;
    }

    /* Button Styles */
    .btn {
      border-radius: 10px;
      padding: 12px 24px;
      font-weight: 600;
      font-size: 14px;
      transition: all 0.3s ease;
      border: none;
      box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      color: white;
    }
    
    .btn-primary:hover {
      background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
    }
    
    .btn-success {
      background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
      color: white;
    }
    
    .btn-success:hover {
      background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(34, 197, 94, 0.4);
    }
    
    .btn-danger {
      background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
      color: white;
    }
    
    .btn-danger:hover {
      background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
    }
    
    .btn-secondary {
      background: #f1f5f9;
      color: #64748b;
      border: 1px solid #e2e8f0;
    }
    
    .btn-secondary:hover {
      background: #e2e8f0;
      color: #1e293b;
    }

    .btn-outline-primary {
      background: white;
      color: #3b82f6;
      border: 2px solid #3b82f6;
    }
    
    .btn-outline-primary:hover {
      background: #3b82f6;
      color: white;
    }

    .btn-outline-danger {
      background: white;
      color: #ef4444;
      border: 2px solid #ef4444;
    }
    
    .btn-outline-danger:hover {
      background: #ef4444;
      color: white;
    }

    .btn-lg {
      padding: 16px 32px;
      font-size: 16px;
    }

    .btn-sm {
      padding: 8px 16px;
      font-size: 13px;
    }

    /* Table Styles - EXACT SAME AS AUDIT UNIVERSE */
    .table-container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      overflow: hidden;
      margin-bottom: 24px;
    }

    .table-header {
      padding: 24px 32px;
      border-bottom: 2px solid #e2e8f0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .table-header h5 {
      font-size: 20px;
      font-weight: 700;
      color: #0f172a;
      margin: 0;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .table-wrapper {
      overflow-x: auto;
      max-width: 100%;
    }

    .table-wrapper::-webkit-scrollbar {
      height: 8px;
    }
    
    .table-wrapper::-webkit-scrollbar-track {
      background: #f8fafc;
    }
    
    .table-wrapper::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 4px;
    }

    .table-modern {
      border-collapse: collapse;
      table-layout: auto;
      min-width: 1200px;
      width: auto;
    }

    .table-modern thead {
      background: #f8fafc;
      position: sticky;
      top: 0;
      z-index: 10;
    }

    .table-modern th {
      padding: 16px;
      text-align: left;
      font-weight: 600;
      font-size: 13px;
      color: #0f172a;
      border: 1px solid #e2e8f0;
      position: relative;
      white-space: nowrap;
      user-select: none;
    }

    .table-modern th .resizer {
      position: absolute;
      top: 0;
      right: 0;
      width: 5px;
      cursor: col-resize;
      user-select: none;
      height: 100%;
      background: transparent;
      z-index: 20;
    }

    .table-modern th .resizer:hover {
      background: #3b82f6;
    }

    .table-modern tbody tr {
      transition: background-color 0.2s;
    }

    .table-modern tbody tr:hover {
      background: #f8fafc;
    }

    .table-modern td {
      padding: 12px 16px;
      border: 1px solid #e2e8f0;
      font-size: 14px;
      color: #1e293b;
      vertical-align: top;
    }

    .table-modern td textarea,
    .table-modern td input,
    .table-modern td select {
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      padding: 8px 12px;
      font-size: 14px;
      width: 100%;
      transition: all 0.2s;
      background: white;
      font-family: inherit;
    }

    .table-modern td textarea {
      min-height: 60px;
      resize: none;
      overflow: hidden;
    }

    .table-modern td textarea:focus,
    .table-modern td input:focus,
    .table-modern td select:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      outline: none;
    }

    .table-modern td input[readonly] {
      background: #f8fafc;
      cursor: not-allowed;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 60px 20px;
    }

    .empty-icon {
      font-size: 64px;
      color: #cbd5e1;
      margin-bottom: 16px;
    }

    .empty-text {
      font-size: 18px;
      font-weight: 600;
      color: #64748b;
      margin-bottom: 8px;
    }

    /* Badge Styles */
    .badge {
      padding: 6px 12px;
      border-radius: 8px;
      font-size: 12px;
      font-weight: 600;
      display: inline-block;
    }

    .badge.bg-success {
      background: #dcfce7;
      color: #16a34a;
    }

    .badge.bg-warning {
      background: #fef3c7;
      color: #ca8a04;
    }

    .badge.bg-danger {
      background: #fee2e2;
      color: #dc2626;
    }

    /* Modal Styles */
    .modal-content {
      border-radius: 16px;
      border: none;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
      border-bottom: 2px solid #e2e8f0;
      padding: 24px 32px;
    }

    .modal-title {
      font-size: 20px;
      font-weight: 700;
      color: #0f172a;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .modal-body {
      padding: 32px;
    }

    .list-group-item {
      border: 1px solid #e2e8f0;
      border-radius: 12px;
      padding: 16px;
      margin-bottom: 12px;
      transition: all 0.2s;
    }

    .list-group-item:hover {
      border-color: #cbd5e1;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    /* Working Paper Section */
    .wp-section {
      margin-bottom: 32px;
    }

    .save-status {
      padding: 12px 24px;
      text-align: center;
      font-weight: 600;
      font-size: 14px;
    }

    /* Add Row Button - EXACT SAME AS AUDIT UNIVERSE */
    .add-row-btn {
      margin: 16px 0;
      background: white;
      border: 2px dashed #cbd5e1;
      border-radius: 10px;
      padding: 16px 24px;
      font-weight: 600;
      color: #64748b;
      transition: all 0.2s;
      cursor: pointer;
      width: 100%;
    }
    
    .add-row-btn:hover {
      border-color: #3b82f6;
      color: #3b82f6;
      background: #f0f9ff;
    }
    
    .add-row-btn i {
      margin-right: 8px;
    }
  </style>
</head>
<body>
  <%- include('../partials/sidebar') %>
  
  <div class="main-content">
    <!-- Notification Container -->
    <div class="notification-container" id="notificationContainer"></div>
    <!-- Breadcrumb -->
    <div class="breadcrumb-custom">
      <nav>
        <a href="/audits/<%= audit.id %>">
          <i class="bi bi-house-door"></i> Audit Workspace
        </a>
        <span style="color: #cbd5e1; margin: 0 8px;">/</span>
        <a href="/audits/<%= audit.id %>">Testing Procedures</a>
        <span style="color: #cbd5e1; margin: 0 8px;">/</span>
        <span style="color: #64748b;"><%= folderName %></span>
      </nav>
    </div>

    <!-- Folder Header Card -->
    <div class="folder-header-card">
      <div style="display: flex; justify-content: space-between; align-items: flex-start;">
        <div style="flex: 1;">
          <h1 class="folder-title">
            <i class="bi bi-folder-fill folder-icon-large"></i>
            <%= folderName %>
          </h1>
          
          <div class="folder-details">
            <div class="detail-item">
              <span class="detail-label">Assigned Auditor</span>
              <span class="detail-value"><%= auditorName || 'Unassigned' %></span>
            </div>
            <div class="detail-item">
              <span class="detail-label">Working Papers Attached</span>
              <span class="detail-value"><%= attachedWPs.length %> paper(s)</span>
            </div>
          </div>
        </div>
        
        <a href="/audits/<%= audit.id %>" class="btn btn-secondary">
          <i class="bi bi-arrow-left"></i> Back to Workspace
        </a>
      </div>
    </div>
    
    <!-- Attach Working Paper Button -->
    <div style="margin-bottom: 24px;">
      <button class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#attachModal">
        <i class="bi bi-plus-circle"></i> Attach Working Paper
      </button>
    </div>
    
    <!-- Working Papers with Full Tables -->
    <% if (attachedWPs.length === 0) { %>
      <div class="card-modern">
        <div class="empty-state">
          <div class="empty-icon">
            <i class="bi bi-file-earmark"></i>
          </div>
          <h5 class="empty-text">No Working Papers Attached</h5>
          <p style="color: #64748b;">Click the button above to attach working papers to this folder</p>
        </div>
      </div>
    <% } else { %>
      <!-- Display Each Working Paper as Full Table -->
      <% attachedWPs.forEach((attached, wpIndex) => { 
        const wp = workingPapersWithData.find(w => w.id === attached.working_paper_id);
        if (!wp) return;
      %>
        <div class="table-container" id="wp-section-<%= wp.id %>">
          <!-- Working Paper Header -->
          <div class="table-header">
            <h5>
              <i class="bi bi-file-earmark-spreadsheet"></i> 
              <%= wp.name %>
              <small style="font-weight: 400; color: #64748b; margin-left: 8px;">(<%= wp.columns.length %> columns)</small>
            </h5>
            <button class="btn btn-danger btn-sm" 
                    onclick="detachWP(<%= wp.id %>)"
                    title="Remove from folder">
              <i class="bi bi-trash"></i> Remove
            </button>
          </div>
          
          <!-- Working Paper Table -->
          <form id="wpForm<%= wp.id %>">
            <div class="table-wrapper">
              <table class="table-modern">
                <thead>
                  <tr>
                    <th style="width: 50px;">#</th>
                    <% wp.columns.forEach(col => { %>
                      <th style="min-width: <%= col.column_type === 'text' ? '200px' : '150px' %>;">
                        <%= col.column_name %>
                        <% if (col.column_type === 'formula') { %>
                          <small class="d-block" style="font-weight: 400; color: #64748b;">Formula</small>
                        <% } %>
                        <div class="resizer"></div>
                      </th>
                    <% }) %>
                    <% if (wp.allow_row_insert) { %>
                      <th style="width: 80px;">Actions</th>
                    <% } %>
                  </tr>
                </thead>
                <tbody id="tbody<%= wp.id %>">
                  <% 
                    const rowsToShow = wp.rows.length === 0 ? [{ id: 'new', data: {} }] : wp.rows;
                  %>
                  <% rowsToShow.forEach((row, rowIndex) => { %>
                    <tr data-row-id="<%= row.id || rowIndex %>">
                      <td><%= rowIndex + 1 %></td>
                      <% wp.columns.forEach(col => { 
                        const cellValue = row.data ? row.data[col.column_name] : '';
                      %>
                        <td>
                          <% if (col.column_type === 'text') { %>
                            <textarea name="rows[<%= rowIndex %>][<%= col.column_name %>]" 
                                      placeholder="Enter text..." 
                                      class="form-control"><%= cellValue || '' %></textarea>
                          
                          <% } else if (col.column_type === 'number') { %>
                            <input type="number" 
                                   name="rows[<%= rowIndex %>][<%= col.column_name %>]" 
                                   value="<%= cellValue || '' %>" 
                                   placeholder="0"
                                   step="any" 
                                   class="form-control">
                          
                          <% } else if (col.column_type === 'date') { %>
                            <input type="date" 
                                   name="rows[<%= rowIndex %>][<%= col.column_name %>]" 
                                   value="<%= cellValue || '' %>" 
                                   class="form-control">
                          
                          <% } else if (col.column_type === 'select' && col.options) { %>
                            <% 
                              let options = [];
                              if (Array.isArray(col.options)) {
                                options = col.options;
                              } else if (typeof col.options === 'string') {
                                try {
                                  options = JSON.parse(col.options);
                                } catch (e) {
                                  options = col.options.split('\n').filter(opt => opt.trim());
                                }
                              }
                            %>
                            <select name="rows[<%= rowIndex %>][<%= col.column_name %>]" class="form-select">
                              <option value="">Select...</option>
                              <% options.forEach(opt => { %>
                                <option value="<%= opt %>" <%= cellValue === opt ? 'selected' : '' %>><%= opt %></option>
                              <% }) %>
                            </select>
                          
                          <% } else if (col.column_type === 'formula') { %>
                            <input type="text" 
                                   value="<%= cellValue || '' %>" 
                                   readonly 
                                   class="form-control" 
                                   placeholder="Calculated">
                          
                          <% } else { %>
                            <input type="text" 
                                   name="rows[<%= rowIndex %>][<%= col.column_name %>]" 
                                   value="<%= cellValue || '' %>" 
                                   placeholder="Enter value..." 
                                   class="form-control">
                          <% } %>
                        </td>
                      <% }) %>
                      <% if (wp.allow_row_insert) { %>
                        <td style="text-align: center;">
                          <button type="button" 
                                  class="btn btn-danger btn-sm" 
                                  onclick="deleteRow(this)" 
                                  title="Delete row">
                            <i class="bi bi-trash"></i>
                          </button>
                        </td>
                      <% } %>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
            
            <% if (wp.allow_row_insert) { %>
              <button type="button" 
                      class="add-row-btn" 
                      data-wp-id="<%= wp.id %>"
                      data-columns="<%= encodeURIComponent(JSON.stringify(wp.columns)) %>"
                      onclick="addRow(this)">
                <i class="bi bi-plus-circle"></i> Add Row
              </button>
            <% } %>
            
            <div id="saveStatus<%= wp.id %>" class="save-status"></div>
          </form>
        </div>
      <% }) %>
    <% } %>
  </div>
  
  <!-- Attach Modal -->
  <div class="modal fade" id="attachModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            <i class="bi bi-paperclip"></i> Attach Working Paper
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <% if (allWorkingPapers.length === 0) { %>
            <div class="text-center py-4">
              <i class="bi bi-file-earmark" style="font-size: 48px; color: #cbd5e1;"></i>
              <p class="mt-3 text-muted">No working papers available. Create one first.</p>
              <a href="/working-papers/create" class="btn btn-primary mt-2">
                <i class="bi bi-plus-circle"></i> Create Working Paper
              </a>
            </div>
          <% } else { %>
            <p class="text-muted mb-3">
              Select working papers to attach. You can attach as many as you need.
            </p>
            <div class="list-group">
              <% allWorkingPapers.forEach(wp => { 
                const isAttached = attachedWPs.some(a => a.working_paper_id === wp.id);
              %>
                <div class="list-group-item">
                  <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div style="flex-grow: 1;">
                      <h6 style="margin-bottom: 4px;">
                        <%= wp.name %>
                        <% if (isAttached) { %>
                          <span class="badge bg-success ms-2">
                            <i class="bi bi-check-circle"></i> Attached
                          </span>
                        <% } %>
                      </h6>
                      <small class="text-muted">
                        <i class="bi bi-columns"></i> <%= wp.column_count %> columns
                        <% if (wp.allow_row_insert) { %>
                          | <i class="bi bi-plus-square"></i> Allows adding rows
                        <% } %>
                      </small>
                    </div>
                    <% if (!isAttached) { %>
                      <button class="btn btn-primary btn-sm" 
                              onclick="attachWP(<%= wp.id %>, '<%= wp.name %>')">
                        <i class="bi bi-plus-circle"></i> Attach
                      </button>
                    <% } else { %>
                      <button class="btn btn-secondary btn-sm" disabled>
                        <i class="bi bi-check"></i> Already Attached
                      </button>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Notification System
    function showNotification(message, type = 'success') {
      const container = document.getElementById('notificationContainer');
      
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      const icon = type === 'success' ? 
        '<i class="bi bi-check-circle-fill"></i>' : 
        '<i class="bi bi-exclamation-triangle-fill"></i>';
      
      notification.innerHTML = `
        <div class="notification-icon">${icon}</div>
        <div class="notification-message">${message}</div>
        <button class="notification-close" onclick="dismissNotification(this)">
          <i class="bi bi-x"></i>
        </button>
      `;
      
      container.appendChild(notification);
      
      setTimeout(() => {
        dismissNotification(notification.querySelector('.notification-close'));
      }, 3000);
    }
    
    function dismissNotification(button) {
      const notification = button.closest('.notification');
      notification.classList.add('hiding');
      
      setTimeout(() => {
        notification.remove();
      }, 400);
    }

    // Attach Working Paper
    function attachWP(wpId, wpName) {
      fetch('/audits/<%= audit.id %>/testing-procedures/<%= riskAssessmentId %>/attach', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ working_paper_id: wpId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showNotification(`"${wpName}" attached successfully!`, 'success');
          setTimeout(() => location.reload(), 1000);
        } else {
          showNotification('Failed to attach working paper', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showNotification('Error attaching working paper', 'error');
      });
    }
    
    // Detach Working Paper
    function detachWP(wpId) {
      if (!confirm('Remove this working paper from this folder?')) return;
      
      fetch('/audits/<%= audit.id %>/testing-procedures/<%= riskAssessmentId %>/detach', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ working_paper_id: wpId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showNotification('Working paper removed successfully!', 'success');
          setTimeout(() => location.reload(), 1000);
        } else {
          showNotification('Failed to remove working paper', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showNotification('Error removing working paper', 'error');
      });
    }
    
    // Add Row
    function addRow(button) {
      const wpId = button.getAttribute('data-wp-id');
      const columnsJson = decodeURIComponent(button.getAttribute('data-columns'));
      const columns = JSON.parse(columnsJson);
      
      const tbody = document.getElementById('tbody' + wpId);
      const rowCount = tbody.querySelectorAll('tr').length;
      
      let newRow = '<tr data-row-id="new-' + Date.now() + '">';
      newRow += '<td>' + (rowCount + 1) + '</td>';
      
      columns.forEach(col => {
        newRow += '<td>';
        if (col.column_type === 'text') {
          newRow += '<textarea name="rows[' + rowCount + '][' + col.column_name + ']" placeholder="Enter text..." class="form-control"></textarea>';
        } else if (col.column_type === 'number') {
          newRow += '<input type="number" name="rows[' + rowCount + '][' + col.column_name + ']" placeholder="0" step="any" class="form-control">';
        } else if (col.column_type === 'date') {
          newRow += '<input type="date" name="rows[' + rowCount + '][' + col.column_name + ']" class="form-control">';
        } else if (col.column_type === 'select' && col.options) {
          let options = [];
          if (Array.isArray(col.options)) {
            options = col.options;
          } else if (typeof col.options === 'string') {
            try {
              options = JSON.parse(col.options);
            } catch (e) {
              options = col.options.split('\n').filter(opt => opt.trim());
            }
          }
          newRow += '<select name="rows[' + rowCount + '][' + col.column_name + ']" class="form-select"><option value="">Select...</option>';
          options.forEach(opt => {
            newRow += '<option value="' + opt + '">' + opt + '</option>';
          });
          newRow += '</select>';
        } else if (col.column_type === 'formula') {
          newRow += '<input type="text" value="" readonly class="form-control" placeholder="Calculated">';
        } else {
          newRow += '<input type="text" name="rows[' + rowCount + '][' + col.column_name + ']" placeholder="Enter value..." class="form-control">';
        }
        newRow += '</td>';
      });
      
      newRow += '<td style="text-align: center;"><button type="button" class="btn btn-danger btn-sm" onclick="deleteRow(this)" title="Delete row"><i class="bi bi-trash"></i></button></td>';
      newRow += '</tr>';
      
      tbody.insertAdjacentHTML('beforeend', newRow);
      updateRowNumbers(wpId);
      
      // Attach auto-save event listeners to new row fields
      const newRowElement = tbody.lastElementChild;
      newRowElement.querySelectorAll('input, textarea, select').forEach(field => {
        field.addEventListener('input', () => autoSave(wpId));
        field.addEventListener('change', () => autoSave(wpId));
        field.addEventListener('blur', () => autoSave(wpId, true));
        
        // Add auto-resize to textareas
        if (field.tagName === 'TEXTAREA') {
          field.addEventListener('input', function() {
            autoResizeTextarea(this);
          });
          autoResizeTextarea(field);
        }
      });
      
      showNotification('New row added', 'success');
    }
    
    // Delete Row
    function deleteRow(btn) {
      if (confirm('Delete this row?')) {
        const tbody = btn.closest('tbody');
        const wpId = tbody.id.replace('tbody', '');
        btn.closest('tr').remove();
        updateRowNumbers(wpId);
        
        // Trigger auto-save after deletion
        autoSave(wpId, true);
        showNotification('Row deleted', 'success');
      }
    }
    
    // Update row numbers after add/delete
    function updateRowNumbers(wpId) {
      const tbody = document.getElementById('tbody' + wpId);
      const rows = tbody.querySelectorAll('tr');
      rows.forEach((row, index) => {
        row.querySelector('td:first-child').textContent = index + 1;
      });
    }
    
    // Auto-save functionality
    let saveTimeouts = {};
    
    // Highlight Audits in sidebar
    document.addEventListener('DOMContentLoaded', function() {
      // Find and highlight the Audits menu item
      const auditsLink = document.querySelector('a[href="/audits"]');
      if (auditsLink) {
        // Remove active class from all menu items
        document.querySelectorAll('.sidebar-link').forEach(link => {
          link.classList.remove('active');
        });
        
        // Add active class to Audits
        auditsLink.classList.add('active');
      }
    });
    
    // Auto-resize textarea function
    function autoResizeTextarea(textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = textarea.scrollHeight + 'px';
    }
    
    // Initialize auto-save and auto-resize on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Add event listeners to all form fields for auto-save
      document.querySelectorAll('form[id^="wpForm"]').forEach(form => {
        const wpId = form.id.replace('wpForm', '');
        
        // Add listeners to all inputs, textareas, and selects
        form.querySelectorAll('input, textarea, select').forEach(field => {
          field.addEventListener('input', () => autoSave(wpId));
          field.addEventListener('change', () => autoSave(wpId));
          field.addEventListener('blur', () => autoSave(wpId, true)); // Save immediately on blur
          
          // Add auto-resize to textareas
          if (field.tagName === 'TEXTAREA') {
            // Resize on input
            field.addEventListener('input', function() {
              autoResizeTextarea(this);
            });
            
            // Initial resize for existing content
            autoResizeTextarea(field);
          }
        });
      });
    });
    
    function autoSave(wpId, immediate = false) {
      const statusSpan = document.getElementById('saveStatus' + wpId);
      
      // Clear existing timeout for this working paper
      if (saveTimeouts[wpId]) {
        clearTimeout(saveTimeouts[wpId]);
      }
      
      // Show saving indicator
      statusSpan.innerHTML = '<span style="color: #64748b;"><i class="bi bi-arrow-repeat"></i> Saving...</span>';
      
      // Set timeout for auto-save (immediate or after 1 second)
      const delay = immediate ? 0 : 1000;
      saveTimeouts[wpId] = setTimeout(() => {
        saveWorkingPaper(wpId);
      }, delay);
    }
    
    // Save Working Paper
    function saveWorkingPaper(wpId) {
      const form = document.getElementById('wpForm' + wpId);
      const formData = new FormData(form);
      const statusSpan = document.getElementById('saveStatus' + wpId);
      
      // Convert FormData to JSON object
      const rowsData = {};
      for (let [key, value] of formData.entries()) {
        const match = key.match(/rows\[(\d+)\]\[(.+)\]/);
        if (match) {
          const rowIndex = match[1];
          const columnName = match[2];
          
          if (!rowsData[rowIndex]) {
            rowsData[rowIndex] = {};
          }
          rowsData[rowIndex][columnName] = value;
        }
      }
      
      fetch('/audits/<%= audit.id %>/testing-procedures/<%= riskAssessmentId %>/save-wp/' + wpId, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ rows: rowsData })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          statusSpan.innerHTML = '<span style="color: #22c55e;"><i class="bi bi-check-circle-fill"></i> All changes saved</span>';
          setTimeout(() => { statusSpan.innerHTML = ''; }, 2000);
        } else {
          throw new Error('Save failed');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        statusSpan.innerHTML = '<span style="color: #ef4444;"><i class="bi bi-x-circle-fill"></i> Error saving</span>';
        showNotification('Error saving changes', 'error');
      });
    }

    // Resizable Columns with Persistence
    document.addEventListener('DOMContentLoaded', function() {
      const resizers = document.querySelectorAll('.resizer');
      
      // Load saved column widths for all tables
      document.querySelectorAll('.table-modern').forEach(table => {
        const form = table.closest('form');
        if (form) {
          const wpId = form.id.replace('wpForm', '');
          loadColumnWidths(wpId, table);
        }
      });
      
      resizers.forEach(resizer => {
        let startX, startWidth, th, table, startTableWidth;
        
        resizer.addEventListener('mousedown', function(e) {
          e.preventDefault();
          th = this.parentElement;
          table = th.closest('.table-modern');
          startX = e.pageX;
          startWidth = th.offsetWidth;
          startTableWidth = table.offsetWidth;
          
          document.addEventListener('mousemove', doDrag);
          document.addEventListener('mouseup', stopDrag);
        });
        
        function doDrag(e) {
          const diff = e.pageX - startX;
          const newWidth = startWidth + diff;
          
          if (newWidth > 50) {
            th.style.width = newWidth + 'px';
            
            // Increase table width to accommodate the change
            const newTableWidth = startTableWidth + diff;
            table.style.width = newTableWidth + 'px';
          }
        }
        
        function stopDrag() {
          document.removeEventListener('mousemove', doDrag);
          document.removeEventListener('mouseup', stopDrag);
          
          // Save column widths and table width after resizing
          const form = table.closest('form');
          if (form) {
            const wpId = form.id.replace('wpForm', '');
            saveColumnWidths(wpId, table);
          }
        }
      });
    });
    
    // Save column widths and table width to localStorage
    function saveColumnWidths(wpId, table) {
      const widths = {};
      const headers = table.querySelectorAll('thead th');
      
      headers.forEach((th, index) => {
        if (th.style.width) {
          widths[index] = th.style.width;
        }
      });
      
      // Also save table width
      widths.tableWidth = table.style.width || 'auto';
      
      const key = `columnWidths_wp_${wpId}`;
      localStorage.setItem(key, JSON.stringify(widths));
    }
    
    // Load column widths and table width from localStorage
    function loadColumnWidths(wpId, table) {
      const key = `columnWidths_wp_${wpId}`;
      const savedWidths = localStorage.getItem(key);
      
      if (savedWidths) {
        try {
          const widths = JSON.parse(savedWidths);
          const headers = table.querySelectorAll('thead th');
          
          // Restore table width first
          if (widths.tableWidth && widths.tableWidth !== 'auto') {
            table.style.width = widths.tableWidth;
          }
          
          // Then restore column widths
          headers.forEach((th, index) => {
            if (widths[index]) {
              th.style.width = widths[index];
            }
          });
        } catch (e) {
          console.error('Error loading column widths:', e);
        }
      }
    }
  </script>
</body>
</html>
